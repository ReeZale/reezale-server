generator client {
  provider = "prisma-client-js"
  output   = "../generated/main"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                             BigInt                           @id @default(autoincrement())
  name                           String
  organizationId                 BigInt?                          @unique
  createdAt                      DateTime                         @default(now())
  updatedAt                      DateTime                         @default(now()) @updatedAt
  storefrontId                   BigInt?                          @unique
  organization                   Organization?                    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  storefront                     Storefront?                      @relation(fields: [storefrontId], references: [id], onDelete: Cascade)
  inventoryLocations             InventoryLocation[]
  inventoryLocationFunctions     InventoryLocationFunction[]
  inventoryLocationFunctionHours InventoryLocationFunctionHours[]
  media                          Media[]
  paymentAccounts                PaymentAccount[]
  sellers                        Seller[]
  storefrontBranding             StorefrontBranding[]
  storefrontConfigurations       StorefrontConfiguration[]
  storefrontContacts             StorefrontContact[]
  storefrontCountries            StorefrontCountry[]
  storefrontCurrencies           StorefrontCurrency[]
  storefrontLocales              StorefrontLocale[]
  storefrontNavigation           StorefrontNavigation[]
  storefrontPages                StorefrontPage[]
  storefrontThemes               StorefrontTheme[]
  users                          User[]
}

model User {
  id               BigInt      @id @default(autoincrement())
  name             String
  email            String      @unique
  password         String
  accountId        BigInt
  preferredLocalId BigInt?
  archive          Boolean     @default(false)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @default(now()) @updatedAt
  authTokens       AuthToken[]
  account          Account     @relation(fields: [accountId], references: [id], onDelete: Cascade)
  preferredLocale  Locale?     @relation(fields: [preferredLocalId], references: [id], onDelete: Cascade)

  @@unique([email, password])
}

model AuthToken {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt
  token     String   @unique
  expiresAt DateTime
  isValid   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
  @@index([isValid])
}

model Organization {
  id          BigInt   @id @default(autoincrement())
  name        String?
  description String?
  url         String?  @unique
  logo        String?
  email       String?  @unique
  phone       String?  @unique
  address     String?
  vatID       String?  @unique
  taxID       String?  @unique
  legalName   String?
  duns        String?  @unique
  linkedin    String?
  twitter     String?
  facebook    String?
  instagram   String?
  tiktok      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  account     Account?
}

model Storefront {
  id                       BigInt                     @id @default(autoincrement())
  name                     String
  logo                     String?
  bannerImage              String?
  domain                   String                     @unique
  refundPolicy             String?
  termsOfService           String?
  privacyPolicy            String?
  facebook                 String?
  twitter                  String?
  instagram                String?
  linkedin                 String?
  tiktok                   String?
  primaryColor             String                     @default("#5A643E")
  secondaryColor           String                     @default("#7F8D58")
  backgroundColor          String                     @default("#F4F4F4")
  textColor                String                     @default("#333333")
  buttonColor              String                     @default("#5A643E")
  buttonTextColor          String                     @default("#FFFFFF")
  fontFamily               String                     @default("Inter, sans-serif")
  borderRadius             Int                        @default(8)
  countryId                BigInt?
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @default(now()) @updatedAt
  account                  Account?
  fields                   Field[]
  paymentAccounts          PaymentAccount[]
  products                 Product[]
  brands                   StoreBrand[]
  categories               StoreCategory[]
  collections              StoreCollection[]
  navigation               StoreNavigation[]
  storeProperties          StoreProperty[]
  country                  Country?                   @relation(fields: [countryId], references: [id], onDelete: Cascade)
  branding                 StorefrontBranding?
  storefrontConfigurations StorefrontConfiguration[]
  contacts                 StorefrontContact[]
  countries                StorefrontCountry[]
  currencies               StorefrontCurrency[]
  identity                 StorefrontIdentity?
  locales                  StorefrontLocale[]
  marketSegments           StorefrontMarketSegment[]
  storefrontNavigations    StorefrontNavigation[]
  pages                    StorefrontPage[]
  productSegments          StorefrontProductSegment[]
  regions                  StorefrontRegion[]
  themes                   StorefrontTheme[]
  templates                Template[]
}

model StorefrontIdentity {
  id            String     @id
  storefrontId  BigInt     @unique
  externalUrl   String?
  slug          String
  canonicalLink String
  facebookLink  String?
  instagramLink String?
  twitterLink   String?
  linkedin      String?
  youtubeLink   String?
  tiktokLink    String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now()) @updatedAt
  iconId        BigInt
  imageId       BigInt
  icon          Media      @relation("IconMedia", fields: [iconId], references: [id], onDelete: Cascade)
  image         Media      @relation("ImageMedia", fields: [imageId], references: [id], onDelete: Cascade)
  storefront    Storefront @relation(fields: [storefrontId], references: [id], onDelete: Cascade)
}

model StorefrontContact {
  id               String              @id
  storefrontId     BigInt
  email            String
  telephone        String
  formattedAddress String?
  placeId          String?
  isDefault        Boolean             @default(true)
  accountId        BigInt
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @default(now()) @updatedAt
  countryId        BigInt
  endTime          String
  lat              Float
  lon              Float
  name             String
  startTime        String
  weekdays         Weekday[]
  account          Account             @relation(fields: [accountId], references: [id], onDelete: Cascade)
  country          Country             @relation(fields: [countryId], references: [id], onDelete: Cascade)
  storefront       Storefront          @relation(fields: [storefrontId], references: [id], onDelete: Cascade)
  countries        StorefrontCountry[]

  @@index([accountId])
}

model StorefrontLocale {
  id               String          @id
  storefrontId     BigInt
  localeId         BigInt
  metaTitle        String?
  metaDescription  String?
  ogTitle          String?
  ogDescription    String?
  paymentAccountId BigInt?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now()) @updatedAt
  accountId        BigInt?
  isDefault        Boolean         @default(true)
  account          Account?        @relation(fields: [accountId], references: [id], onDelete: Cascade)
  locale           Locale          @relation(fields: [localeId], references: [id], onDelete: Cascade)
  paymentAccount   PaymentAccount? @relation(fields: [paymentAccountId], references: [id], onDelete: Cascade)
  storefront       Storefront      @relation(fields: [storefrontId], references: [id], onDelete: Cascade)

  @@unique([storefrontId, localeId])
  @@index([accountId])
}

model StorefrontCountry {
  id                  String            @id
  storefrontId        BigInt
  countryId           BigInt
  storefrontContactId String
  accountId           BigInt
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @default(now()) @updatedAt
  account             Account           @relation(fields: [accountId], references: [id], onDelete: Cascade)
  country             Country           @relation(fields: [countryId], references: [id], onDelete: Cascade)
  storefrontContact   StorefrontContact @relation(fields: [storefrontContactId], references: [id], onDelete: Cascade)
  storefront          Storefront        @relation(fields: [storefrontId], references: [id], onDelete: Cascade)

  @@unique([storefrontId, countryId])
  @@index([accountId])
}

model StorefrontCurrency {
  id           String     @id
  storefrontId BigInt
  currencyId   BigInt
  accountId    BigInt
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  account      Account    @relation(fields: [accountId], references: [id], onDelete: Cascade)
  currency     Currency   @relation(fields: [currencyId], references: [id], onDelete: Cascade)
  storefront   Storefront @relation(fields: [storefrontId], references: [id], onDelete: Cascade)

  @@unique([storefrontId, currencyId])
  @@index([accountId])
}

model StorefrontTheme {
  id                 String        @id
  storefrontId       BigInt
  name               String
  description        String
  publishStatus      PublishStatus @default(DRAFT)
  isActive           Boolean       @default(false)
  effectiveAt        DateTime?
  colorPrimary       String        @default("#5A643E")
  colorSecondary     String        @default("#7F8D58")
  colorBackground    String        @default("#F4F4F4")
  colorSurface       String        @default("#FFFFFF")
  colorTextPrimary   String        @default("#333333")
  colorTextSecondary String        @default("#666666")
  colorLink          String        @default("#5A643E")
  colorError         String        @default("#D32F2F")
  fontFamily         String        @default("Inter, sans-serif")
  fontSizeBase       Int           @default(16)
  fontSizeScale      Float         @default(1.0)
  borderRadius       Int           @default(8)
  spacingUnit        Int           @default(8)
  accountId          BigInt
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @default(now()) @updatedAt
  account            Account       @relation(fields: [accountId], references: [id], onDelete: Cascade)
  storefront         Storefront    @relation(fields: [storefrontId], references: [id], onDelete: Cascade)

  @@unique([storefrontId, name])
  @@index([storefrontId, isActive])
  @@index([accountId])
}

model StorefrontBranding {
  id            String     @id @default(cuid())
  storefrontId  BigInt     @unique
  accountId     BigInt
  brandName     String?
  description   String?
  slogan        String?
  logoUrl       String?
  imageUrl      String?
  url           String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  facebookLink  String?
  instagramLink String?
  linkedin      String?
  pinterestLink String?
  snapchatLink  String?
  tiktokLink    String?
  twitterLink   String?
  youtubeLink   String?
  account       Account    @relation(fields: [accountId], references: [id], onDelete: Cascade)
  storefront    Storefront @relation(fields: [storefrontId], references: [id], onDelete: Cascade)
}

model StorefrontConfiguration {
  id                           String                 @id
  name                         String                 @default("Default Storefront Configuration")
  storefrontId                 BigInt
  accountId                    BigInt
  mainImageId                  BigInt
  mainImageBrightness          Int                    @default(70)
  collectionPreviewBrightness  Int                    @default(80)
  hasPromotedCollection        Boolean                @default(false)
  promotedStoreCollectionTitle String?
  storeCollectionId            BigInt?
  about                        String
  isPublished                  Boolean                @default(false)
  isActive                     Boolean                @default(false)
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
  account                      Account                @relation(fields: [accountId], references: [id], onDelete: Cascade)
  mainImage                    Media                  @relation(fields: [mainImageId], references: [id], onDelete: Cascade)
  promotedStoreCollection      StoreCollection?       @relation(fields: [storeCollectionId], references: [id], onDelete: Cascade)
  storefront                   Storefront             @relation(fields: [storefrontId], references: [id], onDelete: Cascade)
  navigationItems              StorefrontNavigation[]

  @@index([accountId, storefrontId, id])
}

model StorefrontNavigation {
  id                        String                  @id
  name                      String                  @default("Default Storefront Navigation")
  storefrontConfigurationId String
  storeCollectionId         BigInt
  storefrontId              BigInt
  accountId                 BigInt
  parentId                  String?
  isActive                  Boolean                 @default(true)
  level                     Int                     @default(0)
  createdAt                 DateTime                @default(now())
  updatedAt                 DateTime                @updatedAt
  account                   Account                 @relation(fields: [accountId], references: [id], onDelete: Cascade)
  parent                    StorefrontNavigation?   @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children                  StorefrontNavigation[]  @relation("ParentChild")
  storefrontCollection      StoreCollection         @relation(fields: [storeCollectionId], references: [id], onDelete: Cascade)
  storefrontConfiguration   StorefrontConfiguration @relation(fields: [storefrontConfigurationId], references: [id], onDelete: Cascade)
  storefront                Storefront              @relation(fields: [storefrontId], references: [id], onDelete: Cascade)

  @@index([id, storefrontId, accountId])
  @@index([parentId])
}

model StorefrontPage {
  id            String        @id
  key           String
  storefrontId  BigInt
  accountId     BigInt
  pageId        String
  content       Json
  isPublished   Boolean       @default(false)
  publishStatus PublishStatus
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  account       Account       @relation(fields: [accountId], references: [id], onDelete: Cascade)
  page          Page          @relation(fields: [pageId], references: [id], onDelete: Cascade)
  storefront    Storefront    @relation(fields: [storefrontId], references: [id], onDelete: Cascade)
}

model Page {
  id                String             @id
  key               String             @unique
  pageType          PageType
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  dynamicPageFields DynamicPageField[]
  translations      PageTranslation[]
  staticPageFields  StaticPageField[]
  storefronts       StorefrontPage[]
}

model PageTranslation {
  id          String   @id
  pageId      String
  localeId    BigInt
  slug        String
  label       String
  description String
  index       Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  locale      Locale   @relation(fields: [localeId], references: [id], onDelete: Cascade)
  page        Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@unique([pageId, localeId])
}

model StaticField {
  id               String                   @id
  key              String                   @unique
  pageFieldType    PageFieldType
  dataSource       String?
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime
  translations     StaticFieldTranslation[]
  staticPageFields StaticPageField[]
}

model StaticFieldTranslation {
  id            String      @id
  staticFieldId String
  localeId      BigInt
  label         String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  locale        Locale      @relation(fields: [localeId], references: [id], onDelete: Cascade)
  staticField   StaticField @relation(fields: [staticFieldId], references: [id], onDelete: Cascade)

  @@unique([staticFieldId, localeId])
}

model DynamicField {
  id                    String                    @id
  key                   String                    @unique
  pageFieldType         PageFieldType
  databaseObjectFieldId String
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime
  databaseObjectField   DatabaseObjectField       @relation(fields: [databaseObjectFieldId], references: [id], onDelete: Cascade)
  tranlations           DynamicFieldTranslation[]
  dynamicPageFields     DynamicPageField[]
}

model DynamicFieldTranslation {
  id             String       @id
  dynamicFieldId String
  localeId       BigInt
  label          String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  dynamicField   DynamicField @relation(fields: [dynamicFieldId], references: [id], onDelete: Cascade)
  locale         Locale       @relation(fields: [localeId], references: [id], onDelete: Cascade)

  @@unique([dynamicFieldId, localeId])
}

model StaticPageField {
  id            String      @id
  pageId        String
  staticFieldId String
  required      Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  page          Page        @relation(fields: [pageId], references: [id], onDelete: Cascade)
  staticField   StaticField @relation(fields: [staticFieldId], references: [id], onDelete: Cascade)

  @@unique([pageId, staticFieldId])
}

model DynamicPageField {
  id             String       @id
  pageId         String
  dynamicFieldId String
  required       Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  dynamicField   DynamicField @relation(fields: [dynamicFieldId], references: [id], onDelete: Cascade)
  page           Page         @relation(fields: [pageId], references: [id], onDelete: Cascade)
}

model StorefrontProductSegment {
  id               BigInt          @id
  storefrontId     BigInt
  productSegmentId BigInt
  primary          Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now()) @updatedAt
  storeCategories  StoreCategory[]
  productSegment   ProductSegment  @relation(fields: [productSegmentId], references: [id], onDelete: Cascade)
  storefront       Storefront      @relation(fields: [storefrontId], references: [id], onDelete: Cascade)

  @@unique([storefrontId, productSegmentId])
}

model StorefrontMarketSegment {
  id           BigInt     @id @default(autoincrement())
  gender       Gender
  ageGroup     AgeGroup
  primary      Boolean
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  storefrontId BigInt
  storefront   Storefront @relation(fields: [storefrontId], references: [id], onDelete: Cascade)
}

model StorefrontRegion {
  id           BigInt     @id @default(autoincrement())
  storefrontId BigInt
  localeId     BigInt
  primary      Boolean
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  locale       Locale     @relation(fields: [localeId], references: [id], onDelete: Cascade)
  storefront   Storefront @relation(fields: [storefrontId], references: [id], onDelete: Cascade)
}

model PaymentAccount {
  id                       BigInt             @id @default(autoincrement())
  storefrontId             BigInt
  accountId                BigInt
  type                     PaymentAccountType @default(managed)
  paymentProvider          PaymentProvider    @default(stripe)
  paymentProviderAccountId String?
  currencyId               BigInt
  paymentFrequency         PaymentFrequency   @default(weekly)
  primary                  Boolean            @default(true)
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @default(now()) @updatedAt
  account                  Account            @relation(fields: [accountId], references: [id], onDelete: Cascade)
  currency                 Currency           @relation(fields: [currencyId], references: [id], onDelete: Cascade)
  storefront               Storefront         @relation(fields: [storefrontId], references: [id], onDelete: Cascade)
  storefrontLocales        StorefrontLocale[]

  @@unique([storefrontId, accountId, paymentProvider, paymentProviderAccountId])
}

model ProductSegment {
  id                         BigInt                      @id @default(autoincrement())
  name                       String
  path                       String
  gcc                        String?
  acc                        String?
  scc                        String?
  ecc                        String?
  translation                Json?
  parentId                   BigInt?
  imageUrl                   String?
  standardTemplateId         BigInt?
  propertyGroupId            BigInt?
  active                     Boolean                     @default(false)
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @default(now()) @updatedAt
  products                   Product[]
  parent                     ProductSegment?             @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children                   ProductSegment[]            @relation("ParentChild")
  propertyGroup              PropertyGroup?              @relation(fields: [propertyGroupId], references: [id], onDelete: Cascade)
  standardTemplate           StandardTemplate?           @relation(fields: [standardTemplateId], references: [id], onDelete: Cascade)
  productSegmentTranslations ProductSegmentTranslation[]
  properties                 SegmentProperty[]
  storeCategories            StoreCategory[]
  storefronts                StorefrontProductSegment[]

  @@index([parentId])
  @@index([path], type: Hash)
}

model ProductSegmentTranslation {
  id               BigInt         @id @default(autoincrement())
  name             String
  path             String
  productSegmentId BigInt
  localeId         BigInt
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now()) @updatedAt
  locale           Locale         @relation(fields: [localeId], references: [id], onDelete: Cascade)
  productSegment   ProductSegment @relation(fields: [productSegmentId], references: [id], onDelete: Cascade)

  @@unique([productSegmentId, localeId])
  @@index([path])
}

model PropertyGroup {
  id          BigInt                  @id @default(autoincrement())
  key         String                  @unique
  name        String
  description String?
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @default(now()) @updatedAt
  segments    ProductSegment[]
  properties  PropertyGroupProperty[]
}

model PropertyGroupProperty {
  id              BigInt        @id @default(autoincrement())
  propertyId      BigInt
  propertyGroupId BigInt
  required        Boolean       @default(true)
  propertyGroup   PropertyGroup @relation(fields: [propertyGroupId], references: [id], onDelete: Cascade)
  property        Property      @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([propertyGroupId, propertyId])
}

model Property {
  id                   BigInt                  @id @default(autoincrement())
  key                  String                  @unique
  label                String
  translations         Json
  options              Json[]
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @default(now()) @updatedAt
  products             ProductProperty[]
  propertyGroups       PropertyGroupProperty[]
  propertyOptions      PropertyOption[]
  propertyTranslations PropertyTranslation[]
  productSegments      SegmentProperty[]
  storeProperties      StoreProperty[]
}

model PropertyOption {
  id                        BigInt                      @id @default(autoincrement())
  key                       String
  propertyId                BigInt
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @default(now()) @updatedAt
  productPropertiesOptions  ProductPropertyOption[]
  property                  Property                    @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyOptionTranslation PropertyOptionTranslation[]
  storePropertyOptions      StorePropertyOption[]
}

model PropertyTranslation {
  id         BigInt   @id @default(autoincrement())
  key        String
  propertyId BigInt
  localeId   BigInt
  label      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  locale     Locale   @relation(fields: [localeId], references: [id], onDelete: Cascade)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([propertyId, localeId])
}

model PropertyOptionTranslation {
  id               BigInt         @id @default(autoincrement())
  key              String
  propertyOptionId BigInt
  localeId         BigInt
  label            String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now()) @updatedAt
  locale           Locale         @relation(fields: [localeId], references: [id], onDelete: Cascade)
  popertyOption    PropertyOption @relation(fields: [propertyOptionId], references: [id], onDelete: Cascade)

  @@unique([propertyOptionId, localeId])
}

model SegmentProperty {
  id               BigInt         @id @default(autoincrement())
  propertyId       BigInt
  productSegmentId BigInt
  required         Boolean        @default(true)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now()) @updatedAt
  productSegment   ProductSegment @relation(fields: [productSegmentId], references: [id], onDelete: Cascade)
  property         Property       @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([propertyId, productSegmentId])
}

model Product {
  id                     BigInt                    @id @default(autoincrement())
  reference              String
  name                   String
  description            String
  thumbnailImage         String
  productImage           String?
  images                 String[]
  gender                 Gender?
  ageGroup               AgeGroup?
  brandId                BigInt?
  productSegmentId       BigInt?
  storefrontId           BigInt
  url                    String?
  hasProperties          Boolean                   @default(false)
  hasVariants            Boolean                   @default(false)
  variantConfigId        BigInt?
  createdAt              DateTime                  @default(now())
  updatedAt              DateTime                  @default(now()) @updatedAt
  brand                  Brand?                    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  productSegment         ProductSegment?           @relation(fields: [productSegmentId], references: [id], onDelete: Cascade)
  storefront             Storefront                @relation(fields: [storefrontId], references: [id], onDelete: Cascade)
  variantConfig          VariantConfig?            @relation(fields: [variantConfigId], references: [id], onDelete: Cascade)
  productMedia           ProductMedia[]
  properties             ProductProperty[]
  variants               ProductVariant[]
  storeCollections       StoreCollectionProducts[]
  storeProductProperties StoreProductProperty[]

  @@unique([reference, storefrontId])
  @@index([brandId, storefrontId])
}

model ProductMedia {
  id        BigInt           @id @default(autoincrement())
  productId BigInt
  mediaId   BigInt
  order     Int?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now()) @updatedAt
  mediaType ProductMediaType
  alt       String
  media     Media            @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  product   Product          @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, mediaId])
}

model Media {
  id                       BigInt                    @id @default(autoincrement())
  url                      String
  fileName                 String?
  fileSize                 Int?
  width                    Int?
  height                   Int?
  duration                 Int?
  mimeType                 String?
  alt                      String?
  mediaType                MediaType
  source                   MediaSource               @default(UPLOADED)
  accountId                BigInt
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @default(now()) @updatedAt
  bucket                   MediaBucket               @default(PRODUCTS)
  account                  Account                   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  products                 ProductMedia[]
  storefrontConfigurations StorefrontConfiguration[]
  storefrontIcon           StorefrontIdentity[]      @relation("IconMedia")
  storefrontImage          StorefrontIdentity[]      @relation("ImageMedia")

  @@unique([url, accountId])
  @@index([mediaType])
}

model Collection {
  id             String                  @id @default(uuid())
  key            String                  @unique
  collectionType CollectionType
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @default(now()) @updatedAt
  parentId       String?
  parent         Collection?             @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children       Collection[]            @relation("ParentChild")
  translations   CollectionTranslation[]
  storefronts    StoreCollection[]
}

model CollectionTranslation {
  id           BigInt     @id @default(autoincrement())
  label        String
  localeId     BigInt
  collectionId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  slug         String
  path         String?
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  locale       Locale     @relation(fields: [localeId], references: [id], onDelete: Cascade)

  @@unique([localeId, collectionId])
}

model StoreCollection {
  id                            BigInt                    @id @default(autoincrement())
  storefrontId                  BigInt
  collectionId                  String
  createdAt                     DateTime                  @default(now())
  updatedAt                     DateTime                  @default(now()) @updatedAt
  collection                    Collection                @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  storefront                    Storefront                @relation(fields: [storefrontId], references: [id], onDelete: Cascade)
  products                      StoreCollectionProducts[]
  navigation                    StoreNavigation[]
  promotedStorefrontCollections StorefrontConfiguration[]
  storefrontNavigation          StorefrontNavigation[]

  @@unique([storefrontId, collectionId])
}

model StoreCollectionProducts {
  id                BigInt          @id @default(autoincrement())
  productId         BigInt
  storeCollectionId BigInt
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt
  product           Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  storeCollection   StoreCollection @relation(fields: [storeCollectionId], references: [id], onDelete: Cascade)

  @@unique([productId, storeCollectionId])
}

model StoreProperty {
  id                      String                  @id
  storefrontId            BigInt
  propertyId              BigInt
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @default(now()) @updatedAt
  storeNavigationFilters  StoreNavigationFilter[]
  storeProductsProperties StoreProductProperty[]
  property                Property                @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  storefront              Storefront              @relation(fields: [storefrontId], references: [id], onDelete: Cascade)
  storePropertyOptions    StorePropertyOption[]

  @@unique([storefrontId, propertyId])
}

model StorePropertyOption {
  id                          String                       @id
  storePropertyId             String
  propertyOptionId            BigInt
  position                    Int                          @default(0)
  display                     Boolean                      @default(true)
  labelOverride               String?
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @default(now()) @updatedAt
  storeProductPropertyOptions StoreProductPropertyOption[]
  propertyOption              PropertyOption               @relation(fields: [propertyOptionId], references: [id], onDelete: Cascade)
  storeProperty               StoreProperty                @relation(fields: [storePropertyId], references: [id], onDelete: Cascade)

  @@unique([storePropertyId, propertyOptionId])
}

model StoreNavigation {
  id                     String                  @id
  storefrontId           BigInt
  slug                   String
  createdAt              DateTime
  updatedAt              DateTime
  isPrimary              Boolean                 @default(false)
  order                  Int
  parentId               String
  storeCollectionId      BigInt
  parent                 StoreNavigation         @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children               StoreNavigation[]       @relation("ParentChild")
  storeCollection        StoreCollection         @relation(fields: [storeCollectionId], references: [id], onDelete: Cascade)
  storefront             Storefront              @relation(fields: [storefrontId], references: [id], onDelete: Cascade)
  storeNavigationFilters StoreNavigationFilter[]
}

model StoreNavigationFilter {
  id                String          @id
  storeNavigationId String
  storePropertyId   String
  order             Int
  createdAt         DateTime
  updatedAt         DateTime
  storeNavigation   StoreNavigation @relation(fields: [storeNavigationId], references: [id], onDelete: Cascade)
  storeProperty     StoreProperty   @relation(fields: [storePropertyId], references: [id], onDelete: Cascade)
}

model VariantConfig {
  id                  BigInt               @id @default(autoincrement())
  key                 String               @unique
  translations        Json
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now()) @updatedAt
  products            Product[]
  variantConfigFields VariantConfigField[]
}

model VariantProperty {
  id                  BigInt               @id @default(autoincrement())
  key                 String               @unique
  translations        Json
  options             Json[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now()) @updatedAt
  variantConfigFields VariantConfigField[]
}

model VariantConfigField {
  id                       BigInt                   @id @default(autoincrement())
  key                      String
  variantConfigId          BigInt
  variantPropertyId        BigInt
  order                    Int
  isRequired               Boolean                  @default(false)
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @default(now()) @updatedAt
  productVariantProperties ProductVariantProperty[]
  variantConfig            VariantConfig            @relation(fields: [variantConfigId], references: [id], onDelete: Cascade)
  variantProperty          VariantProperty          @relation(fields: [variantPropertyId], references: [id], onDelete: Cascade)

  @@unique([variantConfigId, variantPropertyId])
}

model ProductVariantProperty {
  id                   BigInt             @id @default(autoincrement())
  productVariantId     BigInt
  variantConfigFieldId BigInt
  value                Json
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @default(now()) @updatedAt
  productVariant       ProductVariant     @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  variantConfigField   VariantConfigField @relation(fields: [variantConfigFieldId], references: [id], onDelete: Cascade)

  @@unique([productVariantId, variantConfigFieldId])
}

model ProductVariant {
  id                       BigInt                   @id @default(autoincrement())
  productId                BigInt
  sku                      String
  gtin                     String?
  mpn                      String?
  name                     String?
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @default(now()) @updatedAt
  listPrices               ListPrice[]
  product                  Product                  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productVariantProperties ProductVariantProperty[]

  @@unique([productId, sku])
}

model ListPrice {
  id               BigInt         @id @default(autoincrement())
  productVariantId BigInt
  condition        Condition
  currencyId       BigInt
  countryId        BigInt
  amount           Decimal        @db.Decimal(10, 2)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now()) @updatedAt
  country          Country        @relation(fields: [countryId], references: [id], onDelete: Cascade)
  currrency        Currency       @relation(fields: [currencyId], references: [id], onDelete: Cascade)
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  offers           Offer[]

  @@unique([productVariantId, countryId, currencyId, condition])
}

model Offer {
  id          BigInt    @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  amount      Decimal   @db.Decimal(10, 2)
  available   Boolean   @default(true)
  listPriceId BigInt
  validUntil  DateTime?
  listPrice   ListPrice @relation(fields: [listPriceId], references: [id], onDelete: Cascade)
}

model Brand {
  id          BigInt       @id @default(autoincrement())
  name        String       @unique
  logo        String
  url         String       @unique
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  products    Product[]
  storefronts StoreBrand[]
}

model StoreBrand {
  id           BigInt     @id @default(autoincrement())
  storefrontId BigInt
  brandId      BigInt
  isOwner      Boolean    @default(true)
  isDefault    Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  brand        Brand      @relation(fields: [brandId], references: [id], onDelete: Cascade)
  storefront   Storefront @relation(fields: [storefrontId], references: [id], onDelete: Cascade)

  @@unique([storefrontId, brandId])
}

model StoreProductProperty {
  id                         String                       @id
  productId                  BigInt
  storePropertyId            String
  values                     Json[]
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @default(now()) @updatedAt
  product                    Product                      @relation(fields: [productId], references: [id], onDelete: Cascade)
  storeProperty              StoreProperty                @relation(fields: [storePropertyId], references: [id], onDelete: Cascade)
  StoreProductPropertyOption StoreProductPropertyOption[]

  @@unique([productId, storePropertyId])
}

model StoreProductPropertyOption {
  id                         String               @id
  storeProductPropertyId     String
  storePropertyOptionId      String
  createdAt                  DateTime             @default(now())
  updatedAt                  DateTime             @default(now()) @updatedAt
  storeProductProperty       StoreProductProperty @relation(fields: [storeProductPropertyId], references: [id], onDelete: Cascade)
  storeProductPropertyOption StorePropertyOption  @relation(fields: [storePropertyOptionId], references: [id], onDelete: Cascade)
}

model ProductProperty {
  id                     BigInt                  @id @default(autoincrement())
  productId              BigInt
  propertyId             BigInt
  type                   PropertyType?
  values                 Json[]
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @default(now()) @updatedAt
  product                Product                 @relation(fields: [productId], references: [id], onDelete: Cascade)
  property               Property                @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  productPropertyOptions ProductPropertyOption[]

  @@unique([productId, propertyId])
}

model ProductPropertyOption {
  id                BigInt          @id @default(autoincrement())
  productPropertyId BigInt
  propertyOptionId  BigInt
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt
  productProperty   ProductProperty @relation(fields: [productPropertyId], references: [id], onDelete: Cascade)
  propertyOption    PropertyOption  @relation(fields: [propertyOptionId], references: [id], onDelete: Cascade)

  @@unique([productPropertyId, propertyOptionId])
}

model TimeZone {
  id            String         @id
  label         String
  offset        String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  locationZones LocationZone[]
}

model LocationZone {
  id                   String              @id
  key                  String              @unique
  countryId            BigInt
  postalCode           String
  displayPostalCode    String
  placeName            String
  adminName1           String?
  adminCode1           String?
  adminName2           String?
  adminCode2           String?
  latitude             Float?
  longitude            Float?
  viewportNortheastLat Float?
  viewportNortheastLng Float?
  viewportSouthwestLat Float?
  viewportSouthwestLng Float?
  timeZoneId           String
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @default(now()) @updatedAt
  inventoryLocations   InventoryLocation[]
  country              Country             @relation(fields: [countryId], references: [id], onDelete: Cascade)
  timeZone             TimeZone            @relation(fields: [timeZoneId], references: [id], onDelete: Cascade)

  @@unique([countryId, postalCode])
  @@index([latitude, longitude])
  @@index([timeZoneId])
}

model InventoryLocation {
  id             String                      @id
  name           String
  displayAddress String
  unit           String
  street         String
  city           String
  locationType   InventoryLocationType
  locationZoneId String
  latitude       Float?
  longitude      Float?
  priority       Int?
  capacity       Int?
  contactEmail   String
  contactPhone   String
  accountId      BigInt
  createdAt      DateTime                    @default(now())
  updatedAt      DateTime                    @default(now()) @updatedAt
  streetNumber   String
  account        Account                     @relation(fields: [accountId], references: [id], onDelete: Cascade)
  locationZone   LocationZone                @relation(fields: [locationZoneId], references: [id], onDelete: Cascade)
  functions      InventoryLocationFunction[]

  @@index([accountId])
}

model InventoryLocationFunction {
  id               String                           @id @default(uuid())
  key              String
  name             String
  locationId       String
  function         InventoryFunctionType
  contactEmail     String?
  contactPhone     String?
  accountId        BigInt
  createdAt        DateTime                         @default(now())
  updatedAt        DateTime                         @default(now()) @updatedAt
  account          Account                          @relation(fields: [accountId], references: [id], onDelete: Cascade)
  location         InventoryLocation                @relation(fields: [locationId], references: [id], onDelete: Cascade)
  hoursOfOperation InventoryLocationFunctionHours[]

  @@index([accountId])
}

model InventoryLocationFunctionHours {
  id                          String                    @id @default(uuid())
  inventoryLocationFunctionId String
  day                         Weekday
  startTime                   String
  endTime                     String
  accountId                   BigInt
  createdAt                   DateTime                  @default(now())
  updatedAt                   DateTime                  @default(now()) @updatedAt
  account                     Account                   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  inventoryLocationFunction   InventoryLocationFunction @relation(fields: [inventoryLocationFunctionId], references: [id], onDelete: Cascade)

  @@unique([inventoryLocationFunctionId, day])
}

model StoreCategory {
  id                         BigInt                   @id @default(autoincrement())
  externalId                 String?
  key                        String?
  name                       String
  description                String?
  path                       String
  productSegmentId           BigInt?
  storefrontId               BigInt
  storefrontProductSegmentId BigInt
  parentId                   BigInt?
  custom                     Boolean                  @default(false)
  archive                    Boolean                  @default(false)
  createdAt                  DateTime                 @default(now())
  updatedAt                  DateTime                 @default(now()) @updatedAt
  translations               Json?
  parent                     StoreCategory?           @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children                   StoreCategory[]          @relation("ParentChild")
  productSegment             ProductSegment?          @relation(fields: [productSegmentId], references: [id], onDelete: Cascade)
  storefront                 Storefront               @relation(fields: [storefrontId], references: [id], onDelete: Cascade)
  storefrontProductSegment   StorefrontProductSegment @relation(fields: [storefrontProductSegmentId], references: [id], onDelete: Cascade)

  @@index([productSegmentId])
  @@index([storefrontId])
  @@index([parentId])
  @@index([name])
}

model Template {
  id           BigInt          @id @default(autoincrement())
  key          String
  name         String          @default("STANDARD")
  description  String
  storefrontId BigInt
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @default(now()) @updatedAt
  storefront   Storefront      @relation(fields: [storefrontId], references: [id], onDelete: Cascade)
  customFields TemplateField[]
}

model Field {
  id              BigInt          @id @default(autoincrement())
  key             String
  name            String
  description     String
  translations    Json?
  options         Json?
  index           Boolean         @default(false)
  type            FieldType
  format          FieldFormat     @default(text)
  storefrontId    BigInt
  standardFieldId BigInt?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now()) @updatedAt
  standardField   StandardField?  @relation(fields: [standardFieldId], references: [id], onDelete: Cascade)
  storefront      Storefront      @relation(fields: [storefrontId], references: [id], onDelete: Cascade)
  templates       TemplateField[]

  @@unique([key, storefrontId])
}

model TemplateField {
  id         BigInt   @id @default(autoincrement())
  templateId BigInt
  fieldId    BigInt
  required   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  field      Field    @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model StandardField {
  id           BigInt                  @id @default(autoincrement())
  key          String                  @unique
  name         String
  description  String
  translations Json?
  index        Boolean                 @default(false)
  type         FieldType
  format       FieldFormat             @default(text)
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @default(now()) @updatedAt
  fields       Field[]
  templates    StandardTemplateField[]
}

model StandardTemplate {
  id              BigInt                  @id @default(autoincrement())
  key             String
  name            String                  @default("STANDARD")
  description     String
  parentId        BigInt?
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @default(now()) @updatedAt
  productSegments ProductSegment[]
  parent          StandardTemplate?       @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children        StandardTemplate[]      @relation("ParentChild")
  fields          StandardTemplateField[]
}

model StandardTemplateField {
  id                 BigInt           @id @default(autoincrement())
  order              Int
  options            Json?
  required           Boolean          @default(true)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @default(now()) @updatedAt
  standardTemplateId BigInt
  standardFieldId    BigInt
  standardField      StandardField    @relation(fields: [standardFieldId], references: [id], onDelete: Cascade)
  standardTemplate   StandardTemplate @relation(fields: [standardTemplateId], references: [id], onDelete: Cascade)
}

model Seller {
  id            BigInt              @id @default(autoincrement())
  domain        String?             @unique
  name          String?
  key           String?             @unique
  logo          String?
  accountId     BigInt?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @default(now()) @updatedAt
  categories    Category[]
  discountRules DiscountRule[]
  notifications OfferNotification[]
  pageConfigs   PageConfig[]
  productFeeds  ProductFeed[]
  account       Account?            @relation(fields: [accountId], references: [id], onDelete: Cascade)
  credentials   SellerCredentials[]
}

model PageConfig {
  id        BigInt   @id @default(autoincrement())
  tagline   String?
  localeId  BigInt
  sellerId  BigInt
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  locale    Locale   @relation(fields: [localeId], references: [id], onDelete: Cascade)
  seller    Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}

model SellerCredentials {
  id             BigInt   @id @default(autoincrement())
  key            String   @default(uuid())
  secret         String   @default(uuid())
  token          String
  sellerId       BigInt
  expirationDate DateTime
  isValid        Boolean  @default(true)
  createdAt      DateTime @default(now())
  updateAt       DateTime @default(now()) @updatedAt
  seller         Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}

model DiscountRule {
  id                BigInt                 @id @default(autoincrement())
  amount            Decimal
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @default(now()) @updatedAt
  sellerId          BigInt
  localeId          BigInt
  categoryDiscounts CategoryDiscountRule[]
  locale            Locale                 @relation(fields: [localeId], references: [id], onDelete: Cascade)
  seller            Seller                 @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@unique([sellerId, localeId])
}

model CategoryDiscountRule {
  id             BigInt       @id @default(autoincrement())
  discountRuleId BigInt
  amount         Decimal
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  categoryId     BigInt
  category       Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  discountRule   DiscountRule @relation(fields: [discountRuleId], references: [id], onDelete: Cascade)

  @@index([discountRuleId, categoryId])
}

model ProductFeed {
  id        BigInt   @id @default(autoincrement())
  link      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sellerId  BigInt
  localeId  BigInt
  locale    Locale   @relation(fields: [localeId], references: [id], onDelete: Cascade)
  seller    Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@index([sellerId, localeId])
}

model Locale {
  id               BigInt                      @id @default(autoincrement())
  code             String                      @unique
  label            String?
  countryId        BigInt?
  languageId       BigInt?
  createdAt        DateTime                    @default(now())
  updatedAt        DateTime                    @updatedAt
  currencyId       BigInt?
  categories       Category[]
  collections      CollectionTranslation[]
  databaseObjects  DatabaseObjectTranslation[]
  databaseFields   DatabseFieldTranslation[]
  discounts        DiscountRule[]
  dynamicFields    DynamicFieldTranslation[]
  country          Country?                    @relation(fields: [countryId], references: [id], onDelete: Cascade)
  currency         Currency?                   @relation(fields: [currencyId], references: [id], onDelete: Cascade)
  language         Language?                   @relation(fields: [languageId], references: [id], onDelete: Cascade)
  notifications    OfferNotification[]
  pageConfigs      PageConfig[]
  pages            PageTranslation[]
  productFeeds     ProductFeed[]
  productSegments  ProductSegmentTranslation[]
  propertyOptions  PropertyOptionTranslation[]
  properties       PropertyTranslation[]
  staticFields     StaticFieldTranslation[]
  storefronts      StorefrontLocale[]
  storefrontRegion StorefrontRegion[]
  users            User[]
}

model Category {
  id            BigInt                 @id @default(autoincrement())
  name          String
  path          String
  relativePath  String?
  breadCrumbs   String[]
  parentId      BigInt?
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  sellerId      BigInt
  localeId      BigInt
  locale        Locale                 @relation(fields: [localeId], references: [id], onDelete: Cascade)
  parent        Category?              @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children      Category[]             @relation("ParentChild")
  seller        Seller                 @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  discountRules CategoryDiscountRule[]

  @@index([sellerId, localeId])
}

model OfferNotification {
  id               BigInt    @id @default(autoincrement())
  email            String
  sku              String
  localeId         BigInt
  notified         Boolean   @default(false)
  notificationDate DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  sellerId         BigInt
  locale           Locale    @relation(fields: [localeId], references: [id], onDelete: Cascade)
  seller           Seller    @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@unique([email, sku, sellerId, localeId])
}

model Order {
  id            BigInt        @id @default(autoincrement())
  reference     String?
  memberId      BigInt?
  shipToAddress Json
  countryId     BigInt
  currency      String
  subTotal      Decimal
  taxAmount     Decimal
  shipping      Decimal
  total         Decimal
  paymentId     BigInt?
  paymentStatus PaymentStatus
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  country       Country       @relation(fields: [countryId], references: [id], onDelete: Cascade)
  member        Member?       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  payment       Payment?      @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  items         OrderItem[]
}

model OrderItem {
  id                  BigInt                @id @default(autoincrement())
  orderId             BigInt
  inventoryId         BigInt
  quantity            Int                   @default(1)
  currency            String
  price               Decimal
  subTotal            Decimal
  taxRate             Decimal
  taxAmount           Decimal
  shipping            Decimal
  total               Decimal
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  inventoryAllocation InventoryAllocation[]
  inventory           Inventory             @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  order               Order                 @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Inventory {
  id         BigInt      @id @default(autoincrement())
  currency   String
  countryId  BigInt
  price      Decimal
  available  Int         @default(0)
  allocated  Int         @default(0)
  reserved   Int         @default(0)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  country    Country     @relation(fields: [countryId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
}

model InventoryAllocation {
  id                 BigInt            @id @default(autoincrement())
  orderItemId        BigInt
  transportRequestId BigInt?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  orderItem          OrderItem         @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  transportRequest   TransportRequest? @relation(fields: [transportRequestId], references: [id], onDelete: Cascade)
}

model Member {
  id        BigInt    @id @default(autoincrement())
  name      String
  email     String    @unique
  phone     String
  verified  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  addresses Address[]
  orders    Order[]
}

model Address {
  id               BigInt   @id @default(autoincrement())
  memberId         BigInt?
  street           String
  unit             String?
  postCode         String
  city             String
  countryId        BigInt
  formattedAddress String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  country          Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
  member           Member?  @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model TransportRequest {
  id                   BigInt                @id @default(autoincrement())
  type                 String
  method               String
  sender               Json
  receiver             Json
  parcels              Json[]
  attributes           Json?
  deliveryDay          DateTime
  release              Boolean?              @default(true)
  deliveryRequirements Json?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  allocations          InventoryAllocation[]
  transportOrder       TransportOrder?
}

model TransportOrder {
  id                 BigInt           @id @default(autoincrement())
  trasnportRequestId BigInt           @unique
  trackingCode       String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  deliveries         Delivery[]
  transportRequeest  TransportRequest @relation(fields: [trasnportRequestId], references: [id], onDelete: Cascade)
}

model Delivery {
  id                   BigInt         @id @default(autoincrement())
  transportOrderId     BigInt
  deliveryId           String
  method               String
  trackingId           String
  deliveryDate         DateTime
  returnCode           String
  attributes           Json
  latestDeliveryDate   DateTime
  earliestDeliveryDate DateTime
  label                String
  senderTrackingUrl    String
  receiverTrackingUrl  String
  status               Json
  statusHistory        Json[]
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  transportOrder       TransportOrder @relation(fields: [transportOrderId], references: [id], onDelete: Cascade)
}

model Payment {
  id        BigInt   @id @default(autoincrement())
  reference String
  method    String
  amount    Decimal
  currency  String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model Partner {
  id        BigInt    @id @default(autoincrement())
  name      String
  legalName String
  address   String
  city      String
  postCode  String
  countryId BigInt
  vat       String?
  orgNumber String?
  website   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  country   Country   @relation(fields: [countryId], references: [id], onDelete: Cascade)
  services  Service[]
}

model Service {
  id          BigInt   @id @default(autoincrement())
  name        String
  description String
  partnerId   BigInt
  baseUrl     String
  token       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  partner     Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade)
}

model Country {
  id                   BigInt              @id @default(autoincrement())
  code                 String              @unique
  name                 String
  currencyId           BigInt?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @default(now()) @updatedAt
  addresses            Address[]
  currency             Currency?           @relation(fields: [currencyId], references: [id], onDelete: Cascade)
  inventory            Inventory[]
  listPrices           ListPrice[]
  locales              Locale[]
  locationZones        LocationZone[]
  orders               Order[]
  partners             Partner[]
  storefronts          Storefront[]
  storefrontContacts   StorefrontContact[]
  availableStorefronts StorefrontCountry[]
}

model Currency {
  id              BigInt               @id @default(autoincrement())
  code            String               @unique
  name            String
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  country         Country[]
  listPrices      ListPrice[]
  locales         Locale[]
  paymentAccounts PaymentAccount[]
  storefronts     StorefrontCurrency[]
}

model Language {
  id        BigInt   @id @default(autoincrement())
  code      String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  locales   Locale[]
}

model DatabaseObject {
  id                  String                      @id
  key                 String                      @unique
  createdAt           DateTime                    @default(now())
  updatedAt           DateTime                    @updatedAt
  DatabaseObjectField DatabaseObjectField[]
  translations        DatabaseObjectTranslation[]
}

model DatabaseObjectTranslation {
  id               String         @id
  databaseObjectId String
  localeId         BigInt
  label            String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  databaseObject   DatabaseObject @relation(fields: [databaseObjectId], references: [id], onDelete: Cascade)
  locale           Locale         @relation(fields: [localeId], references: [id], onDelete: Cascade)

  @@unique([databaseObjectId, localeId])
}

model DatabaseField {
  id              String                    @id
  key             String                    @unique
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  databaseObjects DatabaseObjectField[]
  translations    DatabseFieldTranslation[]
}

model DatabseFieldTranslation {
  id              String        @id
  databaseFieldId String
  localeId        BigInt
  label           String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  databaseField   DatabaseField @relation(fields: [databaseFieldId], references: [id], onDelete: Cascade)
  locale          Locale        @relation(fields: [localeId], references: [id], onDelete: Cascade)

  @@unique([databaseFieldId, localeId])
}

model DatabaseObjectField {
  id               String         @id
  key              String         @unique
  databaseObjectId String
  databaseFieldId  String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  databaseField    DatabaseField  @relation(fields: [databaseFieldId], references: [id], onDelete: Cascade)
  databaseObject   DatabaseObject @relation(fields: [databaseObjectId], references: [id], onDelete: Cascade)
  DynamicField     DynamicField[]

  @@unique([databaseObjectId, databaseFieldId])
}

enum PublishStatus {
  DRAFT
  ACTIVE
  SCHEDULED
}

enum SocialPlatform {
  FACEBOOK
  INSTAGRAM
  TWITTER
  LINKEDIN
  PINTEREST
  YOUTUBE
  TIKTOK
  SNAPCHAT
}

enum PageType {
  STATIC
  PRODUCT
  COLLECTION
  BLOG
  BLOG_LIST
  SEARCH
  LANDING
  CART
  CHECKOUT
  ACCOUNT
  ORDER_HISTORY
  CUSTOM
}

enum PageFieldType {
  SHORT_TEXT
  LONG_TEXT
  RICH_TEXT
  SLUG
  NUMBER
  BOOLEAN
  DATE
  DATETIME
  URL
  EMAIL
  PHONE
  PRICE
  IMAGE
  FILE
  COLOR
  VIDEO_URL
  SELECT
  MULTISELECT
  LIST
  OBJECT
  REFERENCE
}

enum PaymentProvider {
  stripe
  ayden
  mollie
  checkout
}

enum PaymentAccountType {
  managed
  custom
}

enum PaymentFrequency {
  daily
  weekly
  monthly
}

enum ProductMediaType {
  PRIMARY
  PRODUCT
  GALLERY
  OTHER
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  OTHER
}

enum MediaSource {
  UPLOADED
  EXTERNAL
}

enum MediaBucket {
  PRODUCTS
  CAMPAIGNS
  BANNER
  LOGO
  CATEGORIES
  COLLECTIONS
  PROFILE
  DOCUMENTS
}

enum CollectionType {
  GENDER
  AGEGROUP
  SEASON
  OCCASION
  HOLIDAY
  MATERIAL
  STYLE
  BRAND
  TREND
  COLOR
  FUNCTION
  FEATURE
  ROOM
  DEVICE
  CATEGORY
}

enum Condition {
  NEW
  USED
  REFURBISHED
  RETURN
}

enum PropertyType {
  GROUP
  SEGMENT
}

enum InventoryLocationType {
  STORE
  WAREHOUSE
  LOCKER
  VIRTUAL
}

enum Weekday {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum InventoryFunctionType {
  FULFILLMENT
  RECEIVING
  RETURNS
  DROPOFF
  STORAGE
}

enum FieldFormat {
  text
  longText
  list
  link
  date
  image
  color
}

enum FieldType {
  property
  variant
  other
}

enum Gender {
  male
  female
  unisex
}

enum AgeGroup {
  adult
  teen
  kids
  infant
  toddler
}

enum SizeType {
  regular
  petite
  plus
  tall
}

enum OfferStatus {
  available
  reserved
  allocated
  pending_shipment
  shipped
  delivered
  accepted
  archived
}

enum OfferType {
  private
  business
}

enum PaymentStatus {
  pending
  failed
  complete
}
