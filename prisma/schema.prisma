// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Seller {
  id            BigInt              @id @default(autoincrement())
  domain        String?
  name          String?
  logo          String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @default(now()) @updatedAt
  discountRules DiscountRule[]
  productFeeds  ProductFeed[]
  offers        Offer[]
  categories    Category[]
  credentials   SellerCredentials[]
  itemGroups    ItemGroup[]
  items         Item[]
  pageConfigs   PageConfig[]
  images        Image[]
}

model PageConfig {
  id        BigInt   @id @default(autoincrement())
  image     Image    @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  imageId   BigInt
  tagline   String?
  locale    Locale   @relation(fields: [localeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  localeId  BigInt
  seller    Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sellerId  BigInt
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model SellerCredentials {
  id             BigInt   @id @default(autoincrement())
  seller         Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  key            String   @default(uuid())
  secret         String   @default(uuid())
  token          String
  sellerId       BigInt
  expirationDate DateTime
  isValid        Boolean  @default(true)
  createdAt      DateTime @default(now())
  updateAt       DateTime @default(now()) @updatedAt
}

model Image {
  id          BigInt       @id @default(autoincrement())
  seller      Seller       @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sellerId    BigInt
  url         String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  pageConfigs PageConfig[]
}

model Brand {
  id         BigInt      @id @default(autoincrement())
  name       String
  normalized String
  itemGroups ItemGroup[]

  @@unique([name, normalized])
}

model DiscountRule {
  id                BigInt                 @id @default(autoincrement())
  seller            Seller                 @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  locale            Locale                 @relation(fields: [localeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  amount            Decimal
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @default(now()) @updatedAt
  categoryDiscounts CategoryDiscountRule[] // Link to category-specific discounts
  sellerId          BigInt
  localeId          BigInt

  @@unique([sellerId, localeId])
}

model CategoryDiscountRule {
  id             BigInt       @id @default(autoincrement())
  discountRule   DiscountRule @relation(fields: [discountRuleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  discountRuleId BigInt
  amount         Decimal
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  category       Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId     BigInt
  offers         Offer[]

  @@index([discountRuleId, categoryId])
}

model ProductFeed {
  id        BigInt   @id @default(autoincrement())
  link      String //where the product feed is hosted
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  seller    Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sellerId  BigInt
  locale    Locale   @relation(fields: [localeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  localeId  BigInt

  @@index([sellerId, localeId])
}

model Locale {
  id               BigInt            @id @default(autoincrement())
  code             String
  currency         String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  discounts        DiscountRule[]
  productFeeds     ProductFeed[]
  offers           Offer[]
  categories       Category[]
  itemDescriptions ItemDescription[]
  itemSizes        ItemSize[]
  pageConfigs      PageConfig[]
}

model Category {
  id            BigInt                 @id @default(autoincrement())
  name          String
  path          String
  breadCrumbs   String[]
  parent        Category?              @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parentId      BigInt?
  seller        Seller                 @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  locale        Locale                 @relation(fields: [localeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  discountRules CategoryDiscountRule[]
  children      Category[]             @relation("ParentChild")
  items         ItemDescription[]
  sellerId      BigInt
  localeId      BigInt

  @@index([sellerId, localeId])
}

model ItemGroup {
  id              BigInt            @id @default(autoincrement())
  sku             String
  brand           Brand             @relation(fields: [brandId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name            String
  gender          Gender
  ageGroup        AgeGroup
  sizeType        SizeType
  image           String
  images          String[]
  seller          Seller?           @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sellerId        BigInt?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  itemDescription ItemDescription[]
  brandId         BigInt
  items           Item[]

  @@unique([brandId, sku])
  @@index([brandId, sku, gender, ageGroup, sizeType])
}

enum Gender {
  male
  female
  unisex
}

enum AgeGroup {
  adult
  teen
  kids
  infant
  toddler
}

enum SizeType {
  regular
  petite
  plus
  tall
}

model Item {
  id          BigInt     @id @default(autoincrement())
  itemGroup   ItemGroup  @relation(fields: [itemGroupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  itemGroupId BigInt
  sku         String
  gtin        String?
  mpn         String?
  seller      Seller?    @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sellerId    BigInt?
  shipWeight  String?
  shipLength  String?
  shipWidth   String?
  shipHeight  String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  sizes       ItemSize[]
  offers      Offer[]

  @@unique([itemGroupId, sku])
}

model ItemSize {
  id           BigInt     @id @default(autoincrement())
  sizeOption   SizeOption @relation(fields: [sizeOptionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sizeOptionId BigInt
  item         Item       @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  itemId       BigInt
  locale       Locale     @relation(fields: [localeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  localeId     BigInt
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([itemId, sizeOptionId, localeId])
}

model SizeOption {
  id         BigInt     @id @default(autoincrement())
  sizeSystem String
  sizeType   SizeType   @default(regular)
  size       String
  items      ItemSize[]

  @@unique([sizeSystem, sizeType, size])
}

model ItemDescription {
  id          BigInt    @id @default(autoincrement())
  itemGroup   ItemGroup @relation(fields: [itemGroupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  title       String
  description String
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId  BigInt
  color       String
  material    String
  pattern     String
  price       Decimal
  salePrice   Decimal
  currency    String
  link        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  itemGroupId BigInt
  locale      Locale    @relation(fields: [localeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  localeId    BigInt

  @@unique([itemGroupId, localeId])
}

model Offer {
  id                BigInt                @id @default(autoincrement())
  seller            Seller                @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sellerId          BigInt
  sellerProfile     SellerProfile?        @relation(fields: [sellerProfileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sellerProfileId   BigInt?
  offerType         OfferType             @default(business)
  reference         String
  condition         Condition?
  availableDate     DateTime              @default(now())
  expirationDate    DateTime
  item              Item                  @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  itemId            BigInt
  appliedDiscount   CategoryDiscountRule? @relation(fields: [appliedDiscountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  appliedDiscountId BigInt?
  price             Decimal
  currency          String?
  locale            Locale                @relation(fields: [localeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  localeId          BigInt
  shipAddress       String? //Depricate and replace with seller profile whcih contains the information necessary to create a transport order. Can provide anonimity to the seller in case of a return
  archived          Boolean               @default(false)
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  orders            Order[]

  @@unique([reference, sellerId, itemId])
  @@index([sellerId, localeId, itemId])
}

enum OfferType {
  private
  business
}

enum Condition {
  new
  used
  refurbished
}

model SellerProfile {
  id        BigInt   @id @default(autoincrement())
  name      String?
  email     String?  @unique
  phone     String?  @unique
  address   Address? @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  addressId BigInt?
  member    Member?  @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade) // Optional link to a registered member
  memberId  BigInt?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  offers    Offer[]
}

model Order {
  id                BigInt             @id @default(autoincrement())
  offer             Offer              @relation(fields: [offerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  offerId           BigInt
  reference         String?
  purchaseProfile   PurchaseProfile    @relation(fields: [purchaseProfileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  purchaseProfileId BigInt
  currency          String
  subTotal          Decimal
  tax               Decimal
  shipping          Decimal
  total             Decimal
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  payment           Payment?
  transportRequest  TransportRequest[]

  @@index([offerId])
}

model PurchaseProfile {
  id        BigInt   @id @default(autoincrement())
  name      String
  email     String?  @unique
  phone     String?  @unique
  address   Address? @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  addressId BigInt?
  member    Member?  @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade) // Optional link to a registered member
  memberId  BigInt?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model Member {
  id               BigInt            @id @default(autoincrement())
  email            String            @unique
  phone            String
  verified         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  purchaseProfiles PurchaseProfile[] // Can be linked to multiple purchases
  sellerProfiles   SellerProfile[]
}

model Address {
  id               BigInt            @id @default(autoincrement())
  street           String
  unit             String? //Apartment or office unit
  postCode         String
  city             String
  country          Country           @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  countryId        BigInt
  formattedAddress String            @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  purchaseProfiles PurchaseProfile[]
  sellerProfiles   SellerProfile[]
}

model TransportRequest {
  id                   BigInt          @id @default(autoincrement())
  order                Order           @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId              BigInt
  type                 String //shipment request, service-point request, return request
  method               String //shipment method: see easy bird documentation
  sender               Json
  receiver             Json
  parcels              Json[]
  attributes           Json?
  deliveryDay          DateTime
  release              Boolean?        @default(true)
  deliveryRequirements Json?
  transportOrder       TransportOrder?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
}

model TransportOrder {
  id                 BigInt           @id @default(autoincrement())
  transportRequeest  TransportRequest @relation(fields: [trasnportRequestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  trasnportRequestId BigInt           @unique
  trackingCode       String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  deliveries         Delivery[]
}

model Delivery {
  id                   BigInt         @id @default(autoincrement())
  transportOrder       TransportOrder @relation(fields: [transportOrderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  transportOrderId     BigInt
  deliveryId           String
  method               String
  trackingId           String
  deliveryDate         DateTime
  returnCode           String
  attributes           Json
  latestDeliveryDate   DateTime
  earliestDeliveryDate DateTime
  label                String
  senderTrackingUrl    String
  receiverTrackingUrl  String
  status               Json
  statusHistory        Json[]
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
}

model Payment {
  id        BigInt   @id @default(autoincrement())
  reference String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId   BigInt   @unique
  method    String
  amount    Decimal
  currency  String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Partner {
  id        BigInt    @id @default(autoincrement())
  name      String
  legalName String
  address   String
  city      String
  postCode  String
  country   Country   @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  countryId BigInt
  vat       String?
  orgNumber String?
  website   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  services  Service[]
}

model Service {
  id          BigInt   @id @default(autoincrement())
  name        String
  description String
  partner     Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  partnerId   BigInt
  baseUrl     String
  token       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Country {
  id        BigInt    @id @default(autoincrement())
  code      String    @unique
  name      String
  currency  String
  partners  Partner[]
  addresses Address[]
}
