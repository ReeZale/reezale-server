// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id              BigInt           @id @default(autoincrement())
  name            String
  organization    Organization?    @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId  BigInt?          @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  sellers         Seller[]
  users           User[]
  storefront      Storefront?      @relation(fields: [storefrontId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storefrontId    BigInt?          @unique
  paymentAccounts PaymentAccount[]
}

model User {
  id        BigInt   @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  accountId BigInt
  archive   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([email, password])
}

model Organization {
  id          BigInt   @id @default(autoincrement())
  name        String? // Organization name
  description String? // Organization description
  url         String?  @unique // Website URL
  logo        String? // URL to the logo
  email       String?  @unique // Contact email
  phone       String?  @unique // Contact phone
  address     String? // Physical address
  vatID       String?  @unique // VAT Identification Number
  taxID       String?  @unique // Tax Identification Number
  legalName   String? // Official registered name
  duns        String?  @unique // DUNS number for business identification
  linkedin    String?
  twitter     String?
  facebook    String?
  instagram   String?
  tiktok      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  account     Account?
}

model Storefront {
  id                 BigInt              @id @default(autoincrement())
  name               String // Storefront brand name
  logo               String? // Shared logo
  bannerImage        String? // Shared banner
  domain             String              @unique // Primary domain (e.g., "brand.com")
  refundPolicy       String?
  termsOfService     String?
  privacyPolicy      String?
  facebook           String?
  twitter            String?
  instagram          String?
  linkedin           String?
  tiktok             String?
  primaryColor       String              @default("#5A643E") // Primary brand color (hex code)
  secondaryColor     String              @default("#7F8D58") // Secondary brand color
  backgroundColor    String              @default("#F4F4F4") // Background color
  textColor          String              @default("#333333") // Default text color
  buttonColor        String              @default("#5A643E") // Button color
  buttonTextColor    String              @default("#FFFFFF") // Button text color
  fontFamily         String              @default("Inter, sans-serif") // Custom font family
  borderRadius       Int                 @default(8) // Border radius for UI elements (e.g., buttons, cards)
  locales            StorefrontLocale[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now()) @updatedAt
  account            Account?
  paymentAccounts    PaymentAccount[]
  storeCategories    StoreCategory[]
  products           Product[]
  customOptionGroups CustomOptionGroup[]
  tags               StoreTags[]
  Template           Template[]
  TemplateField      ProductField[]
}

model Template {
  id               BigInt            @id @default(autoincrement())
  name             String            @default("STANDARD")
  storefront       Storefront        @relation(fields: [storefrontId], references: [id])
  storefrontId     BigInt
  productTemplates ProductTemplate[]
}

model ProductField {
  id               BigInt            @id @default(autoincrement())
  key              String
  name             String
  description      String
  translations     Json?
  index            Boolean           @default(false)
  fieldType        FieldType         @default(text)
  storefront       Storefront        @relation(fields: [storefrontId], references: [id])
  storefrontId     BigInt
  productTemplates ProductTemplate[]
}

model ProductTemplate {
  id              BigInt       @id @default(autoincrement())
  template        Template     @relation(fields: [templateId], references: [id])
  templateId      BigInt
  templateField   ProductField @relation(fields: [templateFieldId], references: [id])
  templateFieldId BigInt
  order           Int
  required        Boolean      @default(true)
}

enum FieldType {
  text
  longText
  list
  link
  date
}

model StorefrontLocale {
  id                   BigInt               @id @default(autoincrement())
  storefrontId         BigInt
  locale               Locale               @relation(fields: [localeId], references: [id], onDelete: Cascade, onUpdate: Cascade) // e.g., "en-US", "fr-FR", "de-DE"
  localeId             BigInt
  timezone             String // e.g., "America/New_York", "Europe/Paris"
  useStorefrontContact Boolean              @default(true)
  contactEmail         String?
  contactPhone         String?
  address              String? // Locale-specific address
  domain               String?              @unique // e.g., "us.brand.com", "fr.brand.com"
  metaTitle            String? // SEO title for the storefront
  metaDescription      String? // SEO description
  metaKeywords         String? // SEO keywords (comma-separated)
  ogTitle              String? // OpenGraph title (for social media)
  ogDescription        String? // OpenGraph description
  ogImage              String? // URL to OpenGraph image (for previews)
  storefront           Storefront           @relation(fields: [storefrontId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  paymentAccount       PaymentAccount?      @relation(fields: [paymentAccountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  paymentAccountId     BigInt?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @default(now()) @updatedAt
  productTranslations  ProductTranslation[]

  @@unique([storefrontId, localeId]) // Ensure uniqueness per storefront
}

model PaymentAccount {
  id                       BigInt             @id @default(autoincrement())
  storefront               Storefront         @relation(fields: [storefrontId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storefrontId             BigInt
  account                  Account            @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  accountId                BigInt
  type                     PaymentAccountType @default(managed)
  paymentProvider          PaymentProvider    @default(stripe)
  paymentProviderAccountId String?
  currency                 Currency           @relation(fields: [currencyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  currencyId               BigInt
  paymentFrequency         PaymentFrequency   @default(weekly) //How often payments are sent to the seller
  primary                  Boolean            @default(true)
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @default(now()) @updatedAt
  storefrontLocales        StorefrontLocale[]

  @@unique([storefrontId, accountId, paymentProvider, paymentProviderAccountId])
}

enum PaymentProvider {
  stripe
  ayden
  mollie
  checkout
}

enum PaymentAccountType {
  managed
  custom
}

enum PaymentFrequency {
  daily
  weekly
  monthly
}

model ProductSegment {
  id              BigInt                       @id @default(autoincrement())
  name            String
  path            String // ðŸ”¥ Remove @unique, Postgres index limitation exceeded
  gcc             String? //Google category code
  acc             String? //Amazon category code
  scc             String? //Shopify category code
  ecc             String? //eBay category code
  parent          ProductSegment?              @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parentId        BigInt?
  children        ProductSegment[]             @relation("ParentChild")
  imageUrl        String? // ðŸ”¥ Optional category icon/image for UI
  createdAt       DateTime                     @default(now())
  updatedAt       DateTime                     @default(now()) @updatedAt
  translations    ProductSegmentTranslations[]
  storeCategories StoreCategory[]
  properties      ProductSegmentProperty[]
  products        Product[]

  @@index([parentId]) // ðŸ”¥ Index for faster hierarchical queries
  @@index([path], type: Hash) // âœ… Use a Hash index to prevent size limit errors
}

model ProductSegmentProperty {
  id               BigInt           @id @default(autoincrement())
  property         StandardProperty @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  propertyId       BigInt
  productSegment   ProductSegment   @relation(fields: [productSegmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productSegmentId BigInt
  require          Boolean          @default(false)

  @@unique([propertyId, productSegmentId])
}

model ProductSegmentTranslations {
  id               BigInt         @id @default(autoincrement())
  name             String
  description      String? // ðŸ”¥ Optional for categories without descriptions
  slug             String
  path             String //category 1 > category 2 > category 3
  locale           Locale         @relation(fields: [localeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  localeId         BigInt
  productSegment   ProductSegment @relation(fields: [productSegmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productSegmentId BigInt
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now()) @updatedAt

  @@unique([localeId, slug]) // ðŸ”¥ Ensures a unique slug per language
}

model StoreCategory {
  id               BigInt           @id @default(autoincrement())
  externalId       String?
  name             String
  productSegment   ProductSegment   @relation(fields: [productSegmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productSegmentId BigInt
  storefront       Storefront       @relation(fields: [storefrontId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storefrontId     BigInt
  parent           StoreCategory?   @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parentId         BigInt?
  children         StoreCategory[]  @relation("ParentChild")
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now()) @updatedAt
  translations     Json?
  products         Product[]
  properties       CustomProperty[]
  tags             CategoryTags[]

  @@index([productSegmentId]) //  Queries filtering by product segment
  @@index([storefrontId]) //  Queries filtering by storefront
  @@index([parentId]) //  Speeds up hierarchical queries
  @@index([name]) //  Useful for searching categories by name
}

model StoreTags {
  id                BigInt     @id @default(autoincrement())
  key               String
  label             String
  labelTranslations Json?
  description       String
  values            Json?
  storefront        Storefront @relation(fields: [storefrontId], references: [id])
  storefrontId      BigInt
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @default(now()) @updatedAt

  @@index([key])
}

model CategoryTags {
  id                   BigInt        @id @default(autoincrement())
  key                  String
  label                String
  labelTranslations    Json?
  description          String
  values               Json?
  storefrontCategory   StoreCategory @relation(fields: [storefrontCategoryId], references: [id])
  storefrontCategoryId BigInt
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @default(now()) @updatedAt
}

//Standard product properties that are assigned at the product segment level. Used across stores for indexing and filtering products
model StandardProperty {
  id              BigInt                    @id @default(autoincrement())
  name            String                    @unique
  description     String
  productSegments ProductSegmentProperty[]
  options         StandardPropertyOption[]
  products        StandardProductProperty[]
  translations    Json?
}

model StandardPropertyOption {
  id            BigInt                    @id @default(autoincrement())
  property      StandardProperty          @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  propertyId    BigInt
  value         String
  translations  Json?
  productGroups StandardProductProperty[]

  @@unique([propertyId, value])
}

model StandardProductProperty {
  id                       BigInt                 @id @default(autoincrement())
  product                  Product                @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId                BigInt
  standardProperty         StandardProperty       @relation(fields: [standardPropertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  standardPropertyId       BigInt
  standardPropertyOption   StandardPropertyOption @relation(fields: [standardPropertyOptionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  standardPropertyOptionId BigInt
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @default(now()) @updatedAt

  @@unique([productId, standardPropertyId, standardPropertyOptionId])
}

model CustomProperty {
  id              BigInt                  @id @default(autoincrement())
  externalId      String?
  name            String
  description     String
  require         Boolean                 @default(false)
  storeCategory   StoreCategory           @relation(fields: [storeCategoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storeCategoryId BigInt
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @default(now()) @updatedAt
  products        CustomProductProperty[]
  options         CustomPropertyOption[]
  translations    Json?
}

model CustomPropertyOption {
  id               BigInt                  @id @default(autoincrement())
  externalId       String?
  customProperty   CustomProperty          @relation(fields: [customPropertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customPropertyId BigInt
  value            String
  translations     Json?
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @default(now()) @updatedAt
  products         CustomProductProperty[]

  @@unique([customPropertyId, value])
}

model CustomProductProperty {
  id                     BigInt               @id @default(autoincrement())
  product                Product              @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId              BigInt
  customProperty         CustomProperty       @relation(fields: [customPropertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customPropertyId       BigInt
  customPropertyOption   CustomPropertyOption @relation(fields: [customPropertyOptionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customPropertyOptionId BigInt
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @default(now()) @updatedAt

  @@unique([productId, customPropertyId, customPropertyOptionId])
}

model Product {
  id                  BigInt                    @id @default(autoincrement())
  reference           String
  name                String
  description         String
  thumbnailImage      String
  images              String[]
  gender              Gender?
  ageGroup            AgeGroup?
  productSegment      ProductSegment            @relation(fields: [productSegmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productSegmentId    BigInt
  storeCategory       StoreCategory             @relation(fields: [storeCategoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storeCategoryId     BigInt
  storefront          Storefront                @relation(fields: [storefrontId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storefrontId        BigInt
  storeTags           String[]
  categoryTags        String[]
  productTemplateData Json? // âœ… Stores the applied template fields
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @default(now()) @updatedAt
  variants            ProductVariant[]
  standardProperties  StandardProductProperty[]
  customProperties    CustomProductProperty[]
  translations        ProductTranslation[]

  @@unique([reference, storefrontId])
}

model ProductTranslation {
  id                 BigInt           @id @default(autoincrement())
  product            Product          @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId          BigInt
  name               String
  descripiton        String
  customAttributes   Json?
  thumbnailImage     String?
  images             String[]         @default([])
  storefrontLocale   StorefrontLocale @relation(fields: [storefrontLocaleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storefrontLocaleId BigInt
  locale             Locale           @relation(fields: [localeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  localeId           BigInt
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @default(now()) @updatedAt

  @@unique([productId, localeId, storefrontLocaleId])
}

model ProductVariant {
  id              BigInt                  @id @default(autoincrement())
  product         Product                 @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId       BigInt
  sku             String?
  gtin            String?
  mpn             String?
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @default(now()) @updatedAt
  standardOptions StandardVariantOption[]
  customOptions   CustomVariantOption[]
}

model StandardOptionGroup {
  id           BigInt                @id @default(autoincrement())
  name         String
  translations Json?
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @default(now()) @updatedAt
  options      StandardOptionValue[]
}

model StandardOptionValue {
  id            BigInt                  @id @default(autoincrement())
  optionGroup   StandardOptionGroup     @relation(fields: [optionGroupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  optionGroupId BigInt
  value         String
  translations  Json?
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @default(now()) @updatedAt
  variants      StandardVariantOption[]
}

// Links a Variant to its Standard Options (Size, etc.)
model StandardVariantOption {
  id            BigInt              @id @default(autoincrement())
  variant       ProductVariant      @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId     BigInt
  optionValue   StandardOptionValue @relation(fields: [optionValueId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  optionValueId BigInt
}

model CustomOptionGroup {
  id           BigInt              @id @default(autoincrement())
  name         String
  store        Storefront          @relation(fields: [storefrontId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storefrontId BigInt
  translations Json?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @default(now()) @updatedAt
  optionValues CustomOptionValue[]
}

model CustomOptionValue {
  id            BigInt                @id @default(autoincrement())
  value         String
  optionGroup   CustomOptionGroup     @relation(fields: [optionGroupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  optionGroupId BigInt
  translations  Json?
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @default(now()) @updatedAt
  variants      CustomVariantOption[]
}

// Links a Variant to its Custom Options
model CustomVariantOption {
  id            BigInt            @id @default(autoincrement())
  variant       ProductVariant    @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId     BigInt
  optionValue   CustomOptionValue @relation(fields: [optionValueId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  optionValueId BigInt
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @default(now()) @updatedAt
}

model Seller {
  id            BigInt              @id @default(autoincrement())
  domain        String?             @unique
  name          String?
  key           String?             @unique
  logo          String?
  account       Account?            @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  accountId     BigInt?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @default(now()) @updatedAt
  discountRules DiscountRule[]
  productFeeds  ProductFeed[]
  offers        Offer[]
  categories    Category[]
  credentials   SellerCredentials[]
  itemGroups    ItemGroup[]
  items         Item[]
  pageConfigs   PageConfig[]
  images        Image[]
  notifications OfferNotification[]
}

model PageConfig {
  id        BigInt   @id @default(autoincrement())
  image     Image    @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  imageId   BigInt
  tagline   String?
  locale    Locale   @relation(fields: [localeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  localeId  BigInt
  seller    Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sellerId  BigInt
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model SellerCredentials {
  id             BigInt   @id @default(autoincrement())
  seller         Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  key            String   @default(uuid())
  secret         String   @default(uuid())
  token          String
  sellerId       BigInt
  expirationDate DateTime
  isValid        Boolean  @default(true)
  createdAt      DateTime @default(now())
  updateAt       DateTime @default(now()) @updatedAt
}

model Image {
  id          BigInt       @id @default(autoincrement())
  seller      Seller       @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sellerId    BigInt
  url         String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  pageConfigs PageConfig[]
}

model Brand {
  id         BigInt      @id @default(autoincrement())
  name       String
  normalized String
  itemGroups ItemGroup[]

  @@unique([name, normalized])
}

model DiscountRule {
  id                BigInt                 @id @default(autoincrement())
  seller            Seller                 @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  locale            Locale                 @relation(fields: [localeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  amount            Decimal
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @default(now()) @updatedAt
  categoryDiscounts CategoryDiscountRule[] // Link to category-specific discounts
  sellerId          BigInt
  localeId          BigInt

  @@unique([sellerId, localeId])
}

model CategoryDiscountRule {
  id             BigInt       @id @default(autoincrement())
  discountRule   DiscountRule @relation(fields: [discountRuleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  discountRuleId BigInt
  amount         Decimal
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  category       Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId     BigInt
  offers         Offer[]

  @@index([discountRuleId, categoryId])
}

model ProductFeed {
  id        BigInt   @id @default(autoincrement())
  link      String //where the product feed is hosted
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  seller    Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sellerId  BigInt
  locale    Locale   @relation(fields: [localeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  localeId  BigInt

  @@index([sellerId, localeId])
}

model Locale {
  id               BigInt                       @id @default(autoincrement())
  code             String
  country          Country?                     @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  countryId        BigInt?
  language         Language?                    @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  languageId       BigInt?
  currency         String
  createdAt        DateTime                     @default(now())
  updatedAt        DateTime                     @updatedAt
  discounts        DiscountRule[]
  productFeeds     ProductFeed[]
  offers           Offer[]
  categories       Category[]
  itemDescriptions ItemDescription[]
  itemSizes        ItemSize[]
  pageConfigs      PageConfig[]
  notifications    OfferNotification[]
  storefronts      StorefrontLocale[]
  productSegments  ProductSegmentTranslations[]
  products         ProductTranslation[]
}

model Category {
  id            BigInt                 @id @default(autoincrement())
  name          String
  path          String
  relativePath  String? //normalized relative path of the page for navigation in our site
  breadCrumbs   String[]
  parent        Category?              @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parentId      BigInt?
  seller        Seller                 @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  locale        Locale                 @relation(fields: [localeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  discountRules CategoryDiscountRule[]
  children      Category[]             @relation("ParentChild")
  items         ItemDescription[]
  sellerId      BigInt
  localeId      BigInt

  @@index([sellerId, localeId])
}

model ItemGroup {
  id              BigInt              @id @default(autoincrement())
  sku             String
  brand           Brand               @relation(fields: [brandId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name            String
  gender          Gender
  ageGroup        AgeGroup
  sizeType        SizeType
  image           String
  images          String[]
  seller          Seller?             @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sellerId        BigInt?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  itemDescription ItemDescription[]
  brandId         BigInt
  items           Item[]
  notifications   OfferNotification[]

  @@unique([brandId, sku])
  @@index([brandId, sku, gender, ageGroup, sizeType])
}

enum Gender {
  male
  female
  unisex
}

enum AgeGroup {
  adult
  teen
  kids
  infant
  toddler
}

enum SizeType {
  regular
  petite
  plus
  tall
}

model Item {
  id          BigInt      @id @default(autoincrement())
  itemGroup   ItemGroup   @relation(fields: [itemGroupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  itemGroupId BigInt
  sku         String
  gtin        String?
  mpn         String?
  seller      Seller?     @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sellerId    BigInt?
  shipWeight  String?
  shipLength  String?
  shipWidth   String?
  shipHeight  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  sizes       ItemSize[]
  offers      Offer[]
  inventory   Inventory[]

  @@unique([itemGroupId, sku])
}

model ItemSize {
  id           BigInt     @id @default(autoincrement())
  sizeOption   SizeOption @relation(fields: [sizeOptionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sizeOptionId BigInt
  item         Item       @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  itemId       BigInt
  locale       Locale     @relation(fields: [localeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  localeId     BigInt
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([itemId, sizeOptionId, localeId])
}

model SizeOption {
  id         BigInt     @id @default(autoincrement())
  sizeSystem String
  sizeType   SizeType   @default(regular)
  size       String
  items      ItemSize[]

  @@unique([sizeSystem, sizeType, size])
}

model ItemDescription {
  id          BigInt    @id @default(autoincrement())
  itemGroup   ItemGroup @relation(fields: [itemGroupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  title       String
  description String
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId  BigInt
  color       String
  material    String
  pattern     String
  price       Decimal
  salePrice   Decimal
  currency    String
  link        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  itemGroupId BigInt
  locale      Locale    @relation(fields: [localeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  localeId    BigInt

  @@unique([itemGroupId, localeId])
}

model Offer {
  id                BigInt                @id @default(autoincrement())
  seller            Seller                @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sellerId          BigInt
  sender            Json? //sender information, address
  member            Member?               @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  memberId          BigInt?
  offerType         OfferType             @default(business)
  reference         String
  condition         Condition?
  availableDate     DateTime              @default(now())
  expirationDate    DateTime
  item              Item                  @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  itemId            BigInt
  inventory         Inventory?            @relation(fields: [inventoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  inventoryId       BigInt?
  appliedDiscount   CategoryDiscountRule? @relation(fields: [appliedDiscountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  appliedDiscountId BigInt?
  price             Decimal
  currency          String?
  locale            Locale                @relation(fields: [localeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  localeId          BigInt
  country           Country?              @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  countryId         BigInt?
  shipAddress       String? //Depricate and replace with seller profile whcih contains the information necessary to create a transport order. Can provide anonimity to the seller in case of a return
  quantity          Int                   @default(1)
  archived          Boolean               @default(false)
  status            OfferStatus           @default(available)
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  notifications     OfferNotification[]
  allocations       InventoryAllocation[]

  @@unique([reference, sellerId, itemId])
  @@index([sellerId, localeId, itemId])
}

enum OfferStatus {
  available // The offer is available for purchase
  reserved // Reserved but not yet allocated to an order
  allocated // Allocated to an order but not yet processed for shipment
  pending_shipment // The item is awaiting shipment
  shipped // The item has been shipped
  delivered // The item has been delivered to the buyer
  accepted //The item was accepted by the buyer
  archived // The offer is no longer active
}

//a service to store notifications for users that want to be notified when an item in a given size arrives
model OfferNotification {
  id               BigInt    @id @default(autoincrement())
  email            String
  sku              String
  itemGroup        ItemGroup @relation(fields: [itemGroupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  itemGroupId      BigInt
  locale           Locale    @relation(fields: [localeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  localeId         BigInt
  seller           Seller    @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  notified         Boolean   @default(false)
  notificationDate DateTime?
  offer            Offer?    @relation(fields: [offerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  offerId          BigInt?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  sellerId         BigInt

  @@unique([email, sku, sellerId, localeId])
}

enum OfferType {
  private
  business
}

enum Condition {
  new
  used
  refurbished
}

model Order {
  id            BigInt        @id @default(autoincrement())
  reference     String?
  member        Member?       @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  memberId      BigInt?
  shipToAddress Json
  country       Country       @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  countryId     BigInt
  currency      String
  subTotal      Decimal
  taxAmount     Decimal
  shipping      Decimal
  total         Decimal
  payment       Payment?      @relation(fields: [paymentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  paymentId     BigInt?
  paymentStatus PaymentStatus
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  items         OrderItem[]
}

enum PaymentStatus {
  pending
  failed
  complete
}

model OrderItem {
  id                  BigInt                @id @default(autoincrement())
  order               Order                 @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId             BigInt
  inventory           Inventory             @relation(fields: [inventoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  inventoryId         BigInt
  quantity            Int                   @default(1)
  currency            String
  price               Decimal // âœ… Snapshot of price per unit
  subTotal            Decimal // âœ… quantity * price
  taxRate             Decimal // âœ… Store the tax rate (e.g., 0.25 for 25%)
  taxAmount           Decimal // âœ… price * taxRate
  shipping            Decimal
  total               Decimal // âœ… subTotal + taxAmount + shipping
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  inventoryAllocation InventoryAllocation[]
}

model Inventory {
  id         BigInt      @id @default(autoincrement())
  item       Item        @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  itemId     BigInt
  country    Country     @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  currency   String
  countryId  BigInt
  price      Decimal
  condition  Condition   @default(new)
  available  Int         @default(0)
  allocated  Int         @default(0)
  reserved   Int         @default(0)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  offers     Offer[]
  orderItems OrderItem[]
}

model InventoryAllocation {
  id                 BigInt            @id @default(autoincrement())
  orderItem          OrderItem         @relation(fields: [orderItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderItemId        BigInt
  offer              Offer             @relation(fields: [offerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  offerId            BigInt
  transportRequest   TransportRequest? @relation(fields: [transportRequestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  transportRequestId BigInt?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
}

model Member {
  id        BigInt    @id @default(autoincrement())
  name      String
  email     String    @unique
  phone     String
  verified  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  addresses Address[]
  orders    Order[]
  offers    Offer[]
}

model Address {
  id               BigInt   @id @default(autoincrement())
  member           Member?  @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  memberId         BigInt?
  street           String
  unit             String? //Apartment or office unit
  postCode         String
  city             String
  country          Country  @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  countryId        BigInt
  formattedAddress String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model TransportRequest {
  id                   BigInt                @id @default(autoincrement())
  type                 String //shipment request, service-point request, return request
  method               String //shipment method: see easy bird documentation
  sender               Json
  receiver             Json
  parcels              Json[]
  attributes           Json?
  deliveryDay          DateTime
  release              Boolean?              @default(true)
  deliveryRequirements Json?
  transportOrder       TransportOrder?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  allocations          InventoryAllocation[]
}

model TransportOrder {
  id                 BigInt           @id @default(autoincrement())
  transportRequeest  TransportRequest @relation(fields: [trasnportRequestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  trasnportRequestId BigInt           @unique
  trackingCode       String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  deliveries         Delivery[]
}

model Delivery {
  id                   BigInt         @id @default(autoincrement())
  transportOrder       TransportOrder @relation(fields: [transportOrderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  transportOrderId     BigInt
  deliveryId           String
  method               String
  trackingId           String
  deliveryDate         DateTime
  returnCode           String
  attributes           Json
  latestDeliveryDate   DateTime
  earliestDeliveryDate DateTime
  label                String
  senderTrackingUrl    String
  receiverTrackingUrl  String
  status               Json
  statusHistory        Json[]
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
}

model Payment {
  id        BigInt   @id @default(autoincrement())
  reference String
  method    String
  amount    Decimal
  currency  String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}

model Partner {
  id        BigInt    @id @default(autoincrement())
  name      String
  legalName String
  address   String
  city      String
  postCode  String
  country   Country   @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  countryId BigInt
  vat       String?
  orgNumber String?
  website   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  services  Service[]
}

model Service {
  id          BigInt   @id @default(autoincrement())
  name        String
  description String
  partner     Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  partnerId   BigInt
  baseUrl     String
  token       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Country {
  id         BigInt      @id @default(autoincrement())
  code       String      @unique
  name       String
  currency   Currency?   @relation(fields: [currencyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  currencyId BigInt?
  partners   Partner[]
  addresses  Address[]
  inventory  Inventory[]
  offers     Offer[]
  orders     Order[]
  locales    Locale[]
}

model Currency {
  id              BigInt           @id @default(autoincrement())
  code            String           @unique
  name            String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  country         Country[]
  paymentAccounts PaymentAccount[]
}

model Language {
  id        BigInt   @id @default(autoincrement())
  code      String   @unique
  name      String
  locales   Locale[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
