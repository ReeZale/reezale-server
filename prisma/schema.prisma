// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id              BigInt           @id @default(autoincrement())
  name            String
  organization    Organization?    @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId  BigInt?          @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  sellers         Seller[]
  users           User[]
  storefront      Storefront?      @relation(fields: [storefrontId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storefrontId    BigInt?          @unique
  paymentAccounts PaymentAccount[]
  media           Media[]
}

model User {
  id               BigInt      @id @default(autoincrement())
  name             String
  email            String      @unique
  password         String
  account          Account     @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  accountId        BigInt
  preferredLocale  Locale?     @relation(fields: [preferredLocalId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  preferredLocalId BigInt?
  archive          Boolean     @default(false)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @default(now()) @updatedAt
  authTokens       AuthToken[]

  @@unique([email, password])
}

model AuthToken {
  id        BigInt   @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    BigInt
  token     String   @unique
  expiresAt DateTime
  isValid   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([expiresAt])
  @@index([isValid])
}

model Organization {
  id          BigInt   @id @default(autoincrement())
  name        String? // Organization name
  description String? // Organization description
  url         String?  @unique // Website URL
  logo        String? // URL to the logo
  email       String?  @unique // Contact email
  phone       String?  @unique // Contact phone
  address     String? // Physical address
  vatID       String?  @unique // VAT Identification Number
  taxID       String?  @unique // Tax Identification Number
  legalName   String? // Official registered name
  duns        String?  @unique // DUNS number for business identification
  linkedin    String?
  twitter     String?
  facebook    String?
  instagram   String?
  tiktok      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  account     Account?
}

model Storefront {
  id              BigInt                     @id @default(autoincrement())
  name            String // Storefront brand name
  logo            String? // Shared logo
  bannerImage     String? // Shared banner
  domain          String                     @unique // Primary domain (e.g., "brand.com")
  refundPolicy    String?
  termsOfService  String?
  privacyPolicy   String?
  facebook        String?
  twitter         String?
  instagram       String?
  linkedin        String?
  tiktok          String?
  primaryColor    String                     @default("#5A643E") // Primary brand color (hex code)
  secondaryColor  String                     @default("#7F8D58") // Secondary brand color
  backgroundColor String                     @default("#F4F4F4") // Background color
  textColor       String                     @default("#333333") // Default text color
  buttonColor     String                     @default("#5A643E") // Button color
  buttonTextColor String                     @default("#FFFFFF") // Button text color
  fontFamily      String                     @default("Inter, sans-serif") // Custom font family
  borderRadius    Int                        @default(8) // Border radius for UI elements (e.g., buttons, cards)
  locales         StorefrontLocale[]
  country         Country?                   @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  countryId       BigInt?
  createdAt       DateTime                   @default(now())
  updatedAt       DateTime                   @default(now()) @updatedAt
  account         Account?
  paymentAccounts PaymentAccount[]
  products        Product[]
  templates       Template[]
  fields          Field[]
  productSegments StorefrontProductSegment[]
  marketSegments  StorefrontMarketSegment[]
  regions         StorefrontRegion[]
  categories      StoreCategory[]
  brands          StoreBrand[]
  collections     StoreCollection[]
  navigation      StoreNavigation[]
}

//Standard produt segments that a store services
model StorefrontProductSegment {
  id               BigInt          @id @default(autoincrement())
  storefront       Storefront      @relation(fields: [storefrontId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storefrontId     BigInt
  productSegment   ProductSegment  @relation(fields: [productSegmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productSegmentId BigInt
  primary          Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now()) @updatedAt
  storeCategories  StoreCategory[]

  @@unique([storefrontId, productSegmentId])
}

//Gender and age group market segment
model StorefrontMarketSegment {
  id           BigInt     @id @default(autoincrement())
  storefront   Storefront @relation(fields: [storefrontId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  gender       Gender
  ageGroup     AgeGroup
  primary      Boolean
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  storefrontId BigInt
}

//The regions that a storefront services
model StorefrontRegion {
  id           BigInt     @id @default(autoincrement())
  storefront   Storefront @relation(fields: [storefrontId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storefrontId BigInt
  locale       Locale     @relation(fields: [localeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  localeId     BigInt
  primary      Boolean
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
}

model StorefrontLocale {
  id                   BigInt          @id @default(autoincrement())
  storefrontId         BigInt
  locale               Locale          @relation(fields: [localeId], references: [id], onDelete: Cascade, onUpdate: Cascade) // e.g., "en-US", "fr-FR", "de-DE"
  localeId             BigInt
  timezone             String // e.g., "America/New_York", "Europe/Paris"
  useStorefrontContact Boolean         @default(true)
  contactEmail         String?
  contactPhone         String?
  address              String? // Locale-specific address
  domain               String?         @unique // e.g., "us.brand.com", "fr.brand.com"
  metaTitle            String? // SEO title for the storefront
  metaDescription      String? // SEO description
  metaKeywords         String? // SEO keywords (comma-separated)
  ogTitle              String? // OpenGraph title (for social media)
  ogDescription        String? // OpenGraph description
  ogImage              String? // URL to OpenGraph image (for previews)
  storefront           Storefront      @relation(fields: [storefrontId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  paymentAccount       PaymentAccount? @relation(fields: [paymentAccountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  paymentAccountId     BigInt?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @default(now()) @updatedAt

  @@unique([storefrontId, localeId]) // Ensure uniqueness per storefront
}

model PaymentAccount {
  id                       BigInt             @id @default(autoincrement())
  storefront               Storefront         @relation(fields: [storefrontId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storefrontId             BigInt
  account                  Account            @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  accountId                BigInt
  type                     PaymentAccountType @default(managed)
  paymentProvider          PaymentProvider    @default(stripe)
  paymentProviderAccountId String?
  currency                 Currency           @relation(fields: [currencyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  currencyId               BigInt
  paymentFrequency         PaymentFrequency   @default(weekly) //How often payments are sent to the seller
  primary                  Boolean            @default(true)
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @default(now()) @updatedAt
  storefrontLocales        StorefrontLocale[]

  @@unique([storefrontId, accountId, paymentProvider, paymentProviderAccountId])
}

enum PaymentProvider {
  stripe
  ayden
  mollie
  checkout
}

enum PaymentAccountType {
  managed
  custom
}

enum PaymentFrequency {
  daily
  weekly
  monthly
}

//Standard product segments linked to major ecommerce and advertising platfroms
model ProductSegment {
  id                         BigInt                      @id @default(autoincrement())
  name                       String
  path                       String // ðŸ”¥ Remove @unique, Postgres index limitation exceeded
  gcc                        String? //Google category code
  acc                        String? //Amazon category code
  scc                        String? //Shopify category code
  ecc                        String? //eBay category code
  translation                Json?
  parent                     ProductSegment?             @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parentId                   BigInt?
  children                   ProductSegment[]            @relation("ParentChild")
  imageUrl                   String? // ðŸ”¥ Optional category icon/image for UI
  standardTemplate           StandardTemplate?           @relation(fields: [standardTemplateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  standardTemplateId         BigInt?
  propertyGroupId            BigInt? // Inherits a group
  propertyGroup              PropertyGroup?              @relation(fields: [propertyGroupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  active                     Boolean                     @default(false)
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @default(now()) @updatedAt
  storeCategories            StoreCategory[]
  products                   Product[]
  storefronts                StorefrontProductSegment[]
  properties                 SegmentProperty[]
  productSegmentTranslations ProductSegmentTranslation[]

  @@index([parentId]) // ðŸ”¥ Index for faster hierarchical queries
  @@index([path], type: Hash) // âœ… Use a Hash index to prevent size limit errors
}

model ProductSegmentTranslation {
  id               BigInt         @id @default(autoincrement())
  name             String
  path             String
  productSegment   ProductSegment @relation(fields: [productSegmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productSegmentId BigInt
  locale           Locale         @relation(fields: [localeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  localeId         BigInt
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now()) @updatedAt

  @@unique([productSegmentId, localeId])
  @@index([path])
}

model PropertyGroup {
  id          BigInt                  @id @default(autoincrement())
  key         String                  @unique
  name        String
  description String?
  properties  PropertyGroupProperty[]
  segments    ProductSegment[]
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @default(now()) @updatedAt
}

model PropertyGroupProperty {
  id              BigInt        @id @default(autoincrement())
  property        Property      @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  propertyId      BigInt
  propertyGroup   PropertyGroup @relation(fields: [propertyGroupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  propertyGroupId BigInt
  required        Boolean       @default(true)

  @@unique([propertyGroupId, propertyId])
}

model Property {
  id                   BigInt                  @id @default(autoincrement())
  key                  String                  @unique
  label                String
  translations         Json // locale-code: translated label
  options              Json[] // key, locale-code, translation
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @default(now()) @updatedAt
  productSegments      SegmentProperty[]
  propertyGroups       PropertyGroupProperty[]
  products             ProductProperty[]
  propertyTranslations PropertyTranslation[]
  propertyOptions      PropertyOption[]
}

model PropertyOption {
  id                        BigInt                      @id @default(autoincrement())
  key                       String
  property                  Property                    @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  propertyId                BigInt
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @default(now()) @updatedAt
  propertyOptionTranslation PropertyOptionTranslation[]
  productPropertiesOptions  ProductPropertyOption[]
}

model PropertyTranslation {
  id         BigInt   @id @default(autoincrement())
  key        String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  propertyId BigInt
  locale     Locale   @relation(fields: [localeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  localeId   BigInt
  label      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@unique([propertyId, localeId])
}

model PropertyOptionTranslation {
  id               BigInt         @id @default(autoincrement())
  key              String
  popertyOption    PropertyOption @relation(fields: [propertyOptionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  propertyOptionId BigInt
  locale           Locale         @relation(fields: [localeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  localeId         BigInt
  label            String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now()) @updatedAt

  @@unique([propertyOptionId, localeId])
}

model SegmentProperty {
  id               BigInt         @id @default(autoincrement())
  property         Property       @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  propertyId       BigInt
  productSegment   ProductSegment @relation(fields: [productSegmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productSegmentId BigInt
  required         Boolean        @default(true)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now()) @updatedAt

  @@unique([propertyId, productSegmentId])
}

model Product {
  id               BigInt                    @id @default(autoincrement())
  reference        String
  name             String
  description      String
  thumbnailImage   String
  productImage     String? //product focus image
  images           String[]
  gender           Gender?
  ageGroup         AgeGroup?
  brand            Brand?                    @relation(fields: [brandId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  brandId          BigInt?
  productSegment   ProductSegment?           @relation(fields: [productSegmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productSegmentId BigInt?
  storeCategory    StoreCategory?            @relation(fields: [storeCategoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storeCategoryId  BigInt?
  storefront       Storefront                @relation(fields: [storefrontId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storefrontId     BigInt
  url              String?
  hasProperties    Boolean                   @default(false)
  hasVariants      Boolean                   @default(false)
  variantConfig    VariantConfig?            @relation(fields: [variantConfigId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  variantConfigId  BigInt?
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @default(now()) @updatedAt
  variants         ProductVariant[]
  properties       ProductProperty[]
  productMedia     ProductMedia[]
  storeCollections StoreCollectionProducts[] //The collections this product belongs to

  @@unique([reference, storefrontId])
  @@index([brandId, storefrontId])
}

enum ProductMediaType {
  PRIMARY // Model / Hero
  PRODUCT // Flat lay / clean
  GALLERY
  OTHER
}

model ProductMedia {
  id        BigInt           @id @default(autoincrement())
  product   Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId BigInt
  media     Media            @relation(fields: [mediaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaId   BigInt
  mediaType ProductMediaType
  order     Int?
  alt       String //image caption
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now()) @updatedAt

  @@unique([productId, mediaId])
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  OTHER
}

enum MediaSource {
  UPLOADED
  EXTERNAL
}

model Media {
  id        BigInt         @id @default(autoincrement())
  url       String
  fileName  String?
  fileSize  Int?
  width     Int? // for images/videos
  height    Int? // for images/videos
  duration  Int? // in seconds (for videos/audio)
  mimeType  String?
  alt       String?
  mediaType MediaType
  source    MediaSource    @default(UPLOADED)
  bucket    MediaBucket    @default(PRODUCTS)
  account   Account        @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  accountId BigInt
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now()) @updatedAt
  products  ProductMedia[]

  @@unique([url, accountId])
  @@index([mediaType])
}

enum MediaBucket {
  PRODUCTS
  CAMPAIGNS
  BANNER
  LOGO
  CATEGORIES
  COLLECTIONS
  PROFILE
  DOCUMENTS
}

model Collection {
  id             String                  @id @default(uuid())
  key            String                  @unique
  collectionType CollectionType
  parent         Collection?             @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parentId       String?
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @default(now()) @updatedAt
  translations   CollectionTranslation[]
  storefronts    StoreCollection[]
  children       Collection[]            @relation("ParentChild")
}

model CollectionTranslation {
  id           BigInt     @id @default(autoincrement())
  label        String
  path         String?
  slug         String
  locale       Locale     @relation(fields: [localeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  localeId     BigInt
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  collectionId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt

  @@unique([localeId, collectionId])
}

enum CollectionType {
  GENDER
  AGEGROUP
  SEASON
  OCCASION
  HOLIDAY
  MATERIAL // e.g., leather, wood, metal
  STYLE // e.g., modern, vintage, minimalist
  BRAND // for grouping by manufacturer
  TREND // e.g., trending, new arrivals
  COLOR // useful for visual filters
  FUNCTION // e.g., travel, home use, office
  FEATURE // e.g., waterproof, eco-friendly, smart-enabled
  ROOM // e.g., kitchen, living room (for home goods)
  DEVICE // e.g., compatible with iOS, Android
  CATEGORY // e.g., electronics, furniture, etc.
}

model StoreCollection {
  id           BigInt                    @id @default(autoincrement())
  storefront   Storefront                @relation(fields: [storefrontId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storefrontId BigInt
  collection   Collection                @relation(fields: [collectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  collectionId String
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @default(now()) @updatedAt
  products     StoreCollectionProducts[]

  @@unique([storefrontId, collectionId])
}

model StoreCollectionProducts {
  id                BigInt          @id @default(autoincrement())
  product           Product         @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId         BigInt
  storeCollection   StoreCollection @relation(fields: [storeCollectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storeCollectionId BigInt
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt

  @@unique([productId, storeCollectionId])
}

model StoreNavigation {
  id           BigInt     @id @default(autoincrement())
  storefront   Storefront @relation(fields: [storefrontId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storefrontId BigInt
  slug         String
  createdAt    DateTime
  updatedAt    DateTime
}

model VariantConfig {
  id                  BigInt               @id @default(autoincrement())
  key                 String               @unique
  translations        Json
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now()) @updatedAt
  variantConfigFields VariantConfigField[]
  products            Product[]
}

model VariantProperty {
  id                  BigInt               @id @default(autoincrement())
  key                 String               @unique
  translations        Json
  options             Json[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now()) @updatedAt
  variantConfigFields VariantConfigField[]
}

model VariantConfigField {
  id                       BigInt                   @id @default(autoincrement())
  key                      String
  variantConfig            VariantConfig            @relation(fields: [variantConfigId], references: [id], onDelete: Cascade)
  variantConfigId          BigInt
  variantProperty          VariantProperty          @relation(fields: [variantPropertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  variantPropertyId        BigInt
  order                    Int // e.g., 1 for "Color", 2 for "Size"
  isRequired               Boolean                  @default(false)
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @default(now()) @updatedAt
  productVariantProperties ProductVariantProperty[]

  @@unique([variantConfigId, variantPropertyId])
}

model ProductVariantProperty {
  id                   BigInt             @id @default(autoincrement())
  productVariant       ProductVariant     @relation(fields: [productVariantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productVariantId     BigInt
  variantConfigField   VariantConfigField @relation(fields: [variantConfigFieldId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  variantConfigFieldId BigInt
  value                Json
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @default(now()) @updatedAt

  @@unique([productVariantId, variantConfigFieldId])
}

model ProductVariant {
  id                       BigInt                   @id @default(autoincrement())
  product                  Product                  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId                BigInt
  sku                      String
  gtin                     String?
  mpn                      String?
  name                     String?
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @default(now()) @updatedAt
  productVariantProperties ProductVariantProperty[]
  listPrices               ListPrice[]

  @@unique([productId, sku])
}

model ListPrice {
  id               BigInt         @id @default(autoincrement())
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productVariantId BigInt
  condition        Condition
  currrency        Currency       @relation(fields: [currencyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  currencyId       BigInt
  country          Country        @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  countryId        BigInt
  amount           Decimal        @db.Decimal(10, 2)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now()) @updatedAt
  offers           Offer[]

  @@unique([productVariantId, countryId, currencyId, condition])
}

model Offer {
  id          BigInt    @id @default(autoincrement())
  listPrice   ListPrice @relation(fields: [listPriceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  listPriceId BigInt
  amount      Decimal   @db.Decimal(10, 2) // discounted price
  available   Boolean   @default(true)
  validUntil  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
}

enum Condition {
  NEW
  USED
  REFURBISHED
  RETURN
}

model Brand {
  id          BigInt       @id @default(autoincrement())
  name        String       @unique
  logo        String
  url         String       @unique
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  products    Product[]
  storefronts StoreBrand[]
}

model StoreBrand {
  id           BigInt     @id @default(autoincrement())
  storefront   Storefront @relation(fields: [storefrontId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storefrontId BigInt
  brand        Brand      @relation(fields: [brandId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  brandId      BigInt
  isOwner      Boolean    @default(true)
  isDefault    Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt

  @@unique([storefrontId, brandId])
}

model ProductProperty {
  id                     BigInt                  @id @default(autoincrement())
  product                Product                 @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId              BigInt
  property               Property                @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  propertyId             BigInt
  type                   PropertyType?
  values                 Json[] // Storing option keys or values here
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @default(now()) @updatedAt
  productPropertyOptions ProductPropertyOption[]

  @@unique([productId, propertyId])
}

model ProductPropertyOption {
  id                BigInt          @id @default(autoincrement())
  productProperty   ProductProperty @relation(fields: [productPropertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productPropertyId BigInt
  propertyOption    PropertyOption  @relation(fields: [propertyOptionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  propertyOptionId  BigInt
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt

  @@unique([productPropertyId, propertyOptionId])
}

enum PropertyType {
  GROUP
  SEGMENT
}

//Custom and standard product categories that a store services. This will be used to build custom navigation schemas while maintaining the link to standard categories
model StoreCategory {
  id                         BigInt                   @id @default(autoincrement())
  externalId                 String?
  key                        String?
  name                       String
  description                String?
  path                       String
  productSegment             ProductSegment?          @relation(fields: [productSegmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productSegmentId           BigInt?
  storefront                 Storefront               @relation(fields: [storefrontId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storefrontId               BigInt
  storefrontProductSegment   StorefrontProductSegment @relation(fields: [storefrontProductSegmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storefrontProductSegmentId BigInt
  parent                     StoreCategory?           @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parentId                   BigInt?
  children                   StoreCategory[]          @relation("ParentChild")
  custom                     Boolean                  @default(false)
  archive                    Boolean                  @default(false)
  createdAt                  DateTime                 @default(now())
  updatedAt                  DateTime                 @default(now()) @updatedAt
  translations               Json?
  products                   Product[]

  @@index([productSegmentId]) //  Queries filtering by product segment
  @@index([storefrontId]) //  Queries filtering by product segment
  @@index([parentId]) //  Speeds up hierarchical queries
  @@index([name]) //  Useful for searching categories by name
}

model Template {
  id           BigInt          @id @default(autoincrement())
  key          String
  name         String          @default("STANDARD")
  description  String
  storefront   Storefront      @relation(fields: [storefrontId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storefrontId BigInt
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @default(now()) @updatedAt
  customFields TemplateField[]
}

model Field {
  id              BigInt          @id @default(autoincrement())
  key             String
  name            String
  description     String
  translations    Json?
  options         Json?
  index           Boolean         @default(false)
  type            FieldType
  format          FieldFormat     @default(text)
  storefront      Storefront      @relation(fields: [storefrontId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storefrontId    BigInt
  standardField   StandardField?  @relation(fields: [standardFieldId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  standardFieldId BigInt?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now()) @updatedAt
  templates       TemplateField[]

  @@unique([key, storefrontId])
}

model TemplateField {
  id         BigInt   @id @default(autoincrement())
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  templateId BigInt
  field      Field    @relation(fields: [fieldId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fieldId    BigInt
  required   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

//Standard data fields that wwould be used to describe a product such as color, materials, etc. Stand alone fields not related to any product segment
model StandardField {
  id           BigInt                  @id @default(autoincrement())
  key          String                  @unique
  name         String
  description  String
  translations Json?
  index        Boolean                 @default(false)
  type         FieldType
  format       FieldFormat             @default(text)
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @default(now()) @updatedAt
  templates    StandardTemplateField[]
  fields       Field[]
}

model StandardTemplate {
  id              BigInt                  @id @default(autoincrement())
  key             String
  name            String                  @default("STANDARD")
  description     String
  parent          StandardTemplate?       @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parentId        BigInt?
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @default(now()) @updatedAt
  fields          StandardTemplateField[]
  productSegments ProductSegment[]
  children        StandardTemplate[]      @relation("ParentChild")
}

model StandardTemplateField {
  id                 BigInt           @id @default(autoincrement())
  standardTemplate   StandardTemplate @relation(fields: [standardTemplateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  standardField      StandardField    @relation(fields: [standardFieldId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  order              Int
  options            Json?
  required           Boolean          @default(true)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @default(now()) @updatedAt
  standardTemplateId BigInt
  standardFieldId    BigInt
}

enum FieldFormat {
  text
  longText
  list
  link
  date
  image
  color
}

enum FieldType {
  property
  variant
  other
}

model Seller {
  id            BigInt              @id @default(autoincrement())
  domain        String?             @unique
  name          String?
  key           String?             @unique
  logo          String?
  account       Account?            @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  accountId     BigInt?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @default(now()) @updatedAt
  discountRules DiscountRule[]
  productFeeds  ProductFeed[]
  categories    Category[]
  credentials   SellerCredentials[]
  items         Item[]
  pageConfigs   PageConfig[]
  notifications OfferNotification[]
}

model PageConfig {
  id        BigInt   @id @default(autoincrement())
  tagline   String?
  locale    Locale   @relation(fields: [localeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  localeId  BigInt
  seller    Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sellerId  BigInt
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model SellerCredentials {
  id             BigInt   @id @default(autoincrement())
  seller         Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  key            String   @default(uuid())
  secret         String   @default(uuid())
  token          String
  sellerId       BigInt
  expirationDate DateTime
  isValid        Boolean  @default(true)
  createdAt      DateTime @default(now())
  updateAt       DateTime @default(now()) @updatedAt
}

model DiscountRule {
  id                BigInt                 @id @default(autoincrement())
  seller            Seller                 @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  locale            Locale                 @relation(fields: [localeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  amount            Decimal
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @default(now()) @updatedAt
  categoryDiscounts CategoryDiscountRule[] // Link to category-specific discounts
  sellerId          BigInt
  localeId          BigInt

  @@unique([sellerId, localeId])
}

model CategoryDiscountRule {
  id             BigInt       @id @default(autoincrement())
  discountRule   DiscountRule @relation(fields: [discountRuleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  discountRuleId BigInt
  amount         Decimal
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  category       Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId     BigInt

  @@index([discountRuleId, categoryId])
}

model ProductFeed {
  id        BigInt   @id @default(autoincrement())
  link      String //where the product feed is hosted
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  seller    Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sellerId  BigInt
  locale    Locale   @relation(fields: [localeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  localeId  BigInt

  @@index([sellerId, localeId])
}

model Locale {
  id               BigInt                      @id @default(autoincrement())
  code             String                      @unique
  label            String?
  country          Country?                    @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  countryId        BigInt?
  language         Language?                   @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  languageId       BigInt?
  currency         Currency?                   @relation(fields: [currencyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  currencyId       BigInt?
  createdAt        DateTime                    @default(now())
  updatedAt        DateTime                    @updatedAt
  discounts        DiscountRule[]
  productFeeds     ProductFeed[]
  categories       Category[]
  itemDescriptions ItemDescription[]
  itemSizes        ItemSize[]
  pageConfigs      PageConfig[]
  notifications    OfferNotification[]
  storefronts      StorefrontLocale[]
  storefrontRegion StorefrontRegion[]
  users            User[]
  properties       PropertyTranslation[]
  propertyOptions  PropertyOptionTranslation[]
  productSegments  ProductSegmentTranslation[]
  collections      CollectionTranslation[]
}

model Category {
  id            BigInt                 @id @default(autoincrement())
  name          String
  path          String
  relativePath  String? //normalized relative path of the page for navigation in our site
  breadCrumbs   String[]
  parent        Category?              @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parentId      BigInt?
  seller        Seller                 @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  locale        Locale                 @relation(fields: [localeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  discountRules CategoryDiscountRule[]
  children      Category[]             @relation("ParentChild")
  items         ItemDescription[]
  sellerId      BigInt
  localeId      BigInt

  @@index([sellerId, localeId])
}


enum Gender {
  male
  female
  unisex
}

enum AgeGroup {
  adult
  teen
  kids
  infant
  toddler
}

enum SizeType {
  regular
  petite
  plus
  tall
}

model Item {
  id          BigInt      @id @default(autoincrement())
  sku         String
  gtin        String?
  mpn         String?
  seller      Seller?     @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sellerId    BigInt?
  shipWeight  String?
  shipLength  String?
  shipWidth   String?
  shipHeight  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  sizes       ItemSize[]
  inventory   Inventory[]

  @@unique([, sku])
}

model ItemSize {
  id           BigInt     @id @default(autoincrement())
  sizeOption   SizeOption @relation(fields: [sizeOptionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sizeOptionId BigInt
  item         Item       @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  itemId       BigInt
  locale       Locale     @relation(fields: [localeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  localeId     BigInt
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([itemId, sizeOptionId, localeId])
}

model SizeOption {
  id         BigInt     @id @default(autoincrement())
  sizeSystem String
  sizeType   SizeType   @default(regular)
  size       String
  items      ItemSize[]

  @@unique([sizeSystem, sizeType, size])
}


enum OfferStatus {
  available // The offer is available for purchase
  reserved // Reserved but not yet allocated to an order
  allocated // Allocated to an order but not yet processed for shipment
  pending_shipment // The item is awaiting shipment
  shipped // The item has been shipped
  delivered // The item has been delivered to the buyer
  accepted //The item was accepted by the buyer
  archived // The offer is no longer active
}

//a service to store notifications for users that want to be notified when an item in a given size arrives
model OfferNotification {
  id               BigInt    @id @default(autoincrement())
  email            String
  sku              String
  itemGroup        ItemGroup @relation(fields: [itemGroupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  itemGroupId      BigInt
  locale           Locale    @relation(fields: [localeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  localeId         BigInt
  seller           Seller    @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  notified         Boolean   @default(false)
  notificationDate DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  sellerId         BigInt

  @@unique([email, sku, sellerId, localeId])
}

enum OfferType {
  private
  business
}

model Order {
  id            BigInt        @id @default(autoincrement())
  reference     String?
  member        Member?       @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  memberId      BigInt?
  shipToAddress Json
  country       Country       @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  countryId     BigInt
  currency      String
  subTotal      Decimal
  taxAmount     Decimal
  shipping      Decimal
  total         Decimal
  payment       Payment?      @relation(fields: [paymentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  paymentId     BigInt?
  paymentStatus PaymentStatus
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  items         OrderItem[]
}

enum PaymentStatus {
  pending
  failed
  complete
}

model OrderItem {
  id                  BigInt                @id @default(autoincrement())
  order               Order                 @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId             BigInt
  inventory           Inventory             @relation(fields: [inventoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  inventoryId         BigInt
  quantity            Int                   @default(1)
  currency            String
  price               Decimal // âœ… Snapshot of price per unit
  subTotal            Decimal // âœ… quantity * price
  taxRate             Decimal // âœ… Store the tax rate (e.g., 0.25 for 25%)
  taxAmount           Decimal // âœ… price * taxRate
  shipping            Decimal
  total               Decimal // âœ… subTotal + taxAmount + shipping
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  inventoryAllocation InventoryAllocation[]
}

model Inventory {
  id         BigInt      @id @default(autoincrement())
  item       Item        @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  itemId     BigInt
  country    Country     @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  currency   String
  countryId  BigInt
  price      Decimal
  available  Int         @default(0)
  allocated  Int         @default(0)
  reserved   Int         @default(0)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems OrderItem[]
}

model InventoryAllocation {
  id                 BigInt            @id @default(autoincrement())
  orderItem          OrderItem         @relation(fields: [orderItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderItemId        BigInt
  transportRequest   TransportRequest? @relation(fields: [transportRequestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  transportRequestId BigInt?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
}

model Member {
  id        BigInt    @id @default(autoincrement())
  name      String
  email     String    @unique
  phone     String
  verified  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  addresses Address[]
  orders    Order[]
}

model Address {
  id               BigInt   @id @default(autoincrement())
  member           Member?  @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  memberId         BigInt?
  street           String
  unit             String? //Apartment or office unit
  postCode         String
  city             String
  country          Country  @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  countryId        BigInt
  formattedAddress String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model TransportRequest {
  id                   BigInt                @id @default(autoincrement())
  type                 String //shipment request, service-point request, return request
  method               String //shipment method: see easy bird documentation
  sender               Json
  receiver             Json
  parcels              Json[]
  attributes           Json?
  deliveryDay          DateTime
  release              Boolean?              @default(true)
  deliveryRequirements Json?
  transportOrder       TransportOrder?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  allocations          InventoryAllocation[]
}

model TransportOrder {
  id                 BigInt           @id @default(autoincrement())
  transportRequeest  TransportRequest @relation(fields: [trasnportRequestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  trasnportRequestId BigInt           @unique
  trackingCode       String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  deliveries         Delivery[]
}

model Delivery {
  id                   BigInt         @id @default(autoincrement())
  transportOrder       TransportOrder @relation(fields: [transportOrderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  transportOrderId     BigInt
  deliveryId           String
  method               String
  trackingId           String
  deliveryDate         DateTime
  returnCode           String
  attributes           Json
  latestDeliveryDate   DateTime
  earliestDeliveryDate DateTime
  label                String
  senderTrackingUrl    String
  receiverTrackingUrl  String
  status               Json
  statusHistory        Json[]
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
}

model Payment {
  id        BigInt   @id @default(autoincrement())
  reference String
  method    String
  amount    Decimal
  currency  String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}

model Partner {
  id        BigInt    @id @default(autoincrement())
  name      String
  legalName String
  address   String
  city      String
  postCode  String
  country   Country   @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  countryId BigInt
  vat       String?
  orgNumber String?
  website   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  services  Service[]
}

model Service {
  id          BigInt   @id @default(autoincrement())
  name        String
  description String
  partner     Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  partnerId   BigInt
  baseUrl     String
  token       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Country {
  id          BigInt       @id @default(autoincrement())
  code        String       @unique
  name        String
  currency    Currency?    @relation(fields: [currencyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  currencyId  BigInt?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  partners    Partner[]
  addresses   Address[]
  inventory   Inventory[]
  orders      Order[]
  locales     Locale[]
  storefronts Storefront[]
  listPrices  ListPrice[]
}

model Currency {
  id              BigInt           @id @default(autoincrement())
  code            String           @unique
  name            String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  country         Country[]
  paymentAccounts PaymentAccount[]
  locales         Locale[]
  listPrices      ListPrice[]
}

model Language {
  id        BigInt   @id @default(autoincrement())
  code      String   @unique
  name      String
  locales   Locale[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
